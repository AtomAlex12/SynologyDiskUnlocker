#!/usr/bin/env python3
"""
Synology Drive Unlocker PRO
–ï–¥–∏–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ç—á–∞–º–∏ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import subprocess
import os
import sys
import json
import threading
import time
import requests
import socket
from pathlib import Path
import paramiko
import logging
from datetime import datetime
import webbrowser

class SynologyUnlockerPro:
    def __init__(self, root):
        self.root = root
        self.root.title("Synology Drive Unlocker PRO v2.0")
        self.root.geometry("1200x800")
        self.root.resizable(True, True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_config()
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
        Path("logs").mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 4 —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤
        self.loggers = {}
        
        # 1. –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ (–≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
        main_logger = logging.getLogger('main')
        main_logger.setLevel(logging.INFO)
        main_handler = logging.FileHandler('logs/main.log', encoding='utf-8')
        main_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        main_handler.setFormatter(main_formatter)
        main_logger.addHandler(main_handler)
        self.loggers['main'] = main_logger
        
        # 2. SSH –ª–æ–≥ (–≤—Å–µ SSH –æ–ø–µ—Ä–∞—Ü–∏–∏)
        ssh_logger = logging.getLogger('ssh')
        ssh_logger.setLevel(logging.DEBUG)
        ssh_handler = logging.FileHandler('logs/ssh.log', encoding='utf-8')
        ssh_formatter = logging.Formatter('%(asctime)s - SSH - %(message)s')
        ssh_handler.setFormatter(ssh_formatter)
        ssh_logger.addHandler(ssh_handler)
        self.loggers['ssh'] = ssh_logger
        
        # 3. –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥ (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
        system_logger = logging.getLogger('system')
        system_logger.setLevel(logging.INFO)
        system_handler = logging.FileHandler('logs/system.log', encoding='utf-8')
        system_formatter = logging.Formatter('%(asctime)s - SYSTEM - %(message)s')
        system_handler.setFormatter(system_formatter)
        system_logger.addHandler(system_handler)
        self.loggers['system'] = system_logger
        
        # 4. –û—à–∏–±–∫–∏ –ª–æ–≥ (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)
        error_logger = logging.getLogger('error')
        error_logger.setLevel(logging.ERROR)
        error_handler = logging.FileHandler('logs/errors.log', encoding='utf-8')
        error_formatter = logging.Formatter('%(asctime)s - ERROR - %(message)s')
        error_handler.setFormatter(error_formatter)
        error_logger.addHandler(error_handler)
        self.loggers['error'] = error_logger
        
    def log(self, message, level='info', category='main'):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ GUI
        self.log_text.insert(tk.END, f"{log_message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª–æ–≤—ã–µ –ª–æ–≥–∏
        if category in self.loggers:
            if level == 'debug':
                self.loggers[category].debug(message)
            elif level == 'info':
                self.loggers[category].info(message)
            elif level == 'warning':
                self.loggers[category].warning(message)
            elif level == 'error':
                self.loggers[category].error(message)
                self.loggers['error'].error(message)
        
        # SSH –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–æ–≥–µ
        if category == 'ssh' and 'SSH –∫–æ–º–∞–Ω–¥–∞:' in message:
            self.loggers['main'].info(f"SSH: {message}")
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –°—Ç–∏–ª–∏
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        style.configure('Title.TLabel', font=('Arial', 20, 'bold'), foreground='#2c3e50')
        style.configure('Subtitle.TLabel', font=('Arial', 12, 'bold'), foreground='#34495e')
        style.configure('Success.TLabel', foreground='#27ae60')
        style.configure('Error.TLabel', foreground='#e74c3c')
        style.configure('Warning.TLabel', foreground='#f39c12')
        style.configure('Accent.TButton', font=('Arial', 10, 'bold'))
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root, padding="10")
        main_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(main_container)
        title_frame.grid(row=0, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        
        title_label = ttk.Label(title_frame, text="üîì Synology Drive Unlocker PRO", 
                               style='Title.TLabel')
        title_label.grid(row=0, column=0)
        
        subtitle_label = ttk.Label(title_frame, text="–ï–¥–∏–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–∏—Å–∫–æ–≤ Synology", 
                                  style='Subtitle.TLabel')
        subtitle_label.grid(row=1, column=0, pady=(5, 0))
        
        # –°–æ–∑–¥–∞–µ–º Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_container)
        self.notebook.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
        self.setup_quick_start_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—á–∏
        self.setup_patches_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        self.setup_diagnostics_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –õ–æ–≥–∏
        self.setup_logs_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.setup_settings_tab()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.setup_status_bar(main_container)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_container.columnconfigure(0, weight=1)
        main_container.rowconfigure(1, weight=1)
    
    def setup_quick_start_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞"""
        quick_frame = ttk.Frame(self.notebook, padding="20")
        self.notebook.add(quick_frame, text="üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = ttk.LabelFrame(quick_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding="15")
        info_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        info_text = """–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–∏—Å–∫–æ–≤:
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç - –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—á–∏ - –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–∏—Å–∫–æ–≤
‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á - –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        
        ttk.Label(info_frame, text=info_text, justify=tk.LEFT).grid(row=0, column=0)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        settings_frame = ttk.LabelFrame(quick_frame, text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", padding="15")
        settings_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # IP –∞–¥—Ä–µ—Å
        ttk.Label(settings_frame, text="IP –∞–¥—Ä–µ—Å NAS:").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.ip_var = tk.StringVar(value="192.168.1.100")
        ttk.Entry(settings_frame, textvariable=self.ip_var, width=20).grid(row=0, column=1, sticky=tk.W, padx=(10, 0))
        
        # –õ–æ–≥–∏–Ω
        ttk.Label(settings_frame, text="–õ–æ–≥–∏–Ω:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.login_var = tk.StringVar(value="admin")
        ttk.Entry(settings_frame, textvariable=self.login_var, width=20).grid(row=1, column=1, sticky=tk.W, padx=(10, 0))
        
        # –ü–∞—Ä–æ–ª—å
        ttk.Label(settings_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.password_var = tk.StringVar()
        ttk.Entry(settings_frame, textvariable=self.password_var, show="*", width=20).grid(row=2, column=1, sticky=tk.W, padx=(10, 0))
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sudo
        self.use_sudo_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(settings_frame, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sudo –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥", 
                       variable=self.use_sudo_var).grid(row=3, column=0, columnspan=2, sticky=tk.W, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        buttons_frame = ttk.Frame(quick_frame)
        buttons_frame.grid(row=2, column=0, columnspan=2, pady=(0, 20))
        
        ttk.Button(buttons_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", 
                  command=self.test_connection).grid(row=0, column=0, padx=(0, 10))
        
        ttk.Button(buttons_frame, text="üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", 
                  command=self.quick_start, style='Accent.TButton').grid(row=0, column=1, padx=10)
        
        ttk.Button(buttons_frame, text="üíæ Toshiba HDWT860", 
                  command=self.toshiba_fix).grid(row=0, column=2, padx=10)
        
        ttk.Button(buttons_frame, text="‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á", 
                  command=self.aggressive_patch).grid(row=0, column=3, padx=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        ttk.Label(quick_frame, textvariable=self.progress_var).grid(row=3, column=0, columnspan=2, sticky=tk.W, pady=(0, 5))
        
        self.progress_bar = ttk.Progressbar(quick_frame, mode='indeterminate')
        self.progress_bar.grid(row=4, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(quick_frame, text="üìù –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π", padding="5")
        log_frame.grid(row=5, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, width=100)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        quick_frame.columnconfigure(1, weight=1)
        quick_frame.rowconfigure(5, weight=1)
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
    
    def setup_patches_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—á–µ–π"""
        patches_frame = ttk.Frame(self.notebook, padding="20")
        self.notebook.add(patches_frame, text="üîß –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—á–∏")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ç—á–∞—Ö
        info_frame = ttk.LabelFrame(patches_frame, text="‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ç—á–∏", padding="15")
        info_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        patches_info = """–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—á –¥–ª—è –≤–∞—à–µ–≥–æ —Å–ª—É—á–∞—è:
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—á - –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –¥–∏—Å–∫–æ–≤
‚Ä¢ Toshiba HDWT860 - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Toshiba 5.5TB
‚Ä¢ WD Red - –¥–ª—è –¥–∏—Å–∫–æ–≤ Western Digital Red
‚Ä¢ Seagate IronWolf - –¥–ª—è –¥–∏—Å–∫–æ–≤ Seagate IronWolf
‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á - –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        
        ttk.Label(info_frame, text=patches_info, justify=tk.LEFT).grid(row=0, column=0)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–∞—Ç—á–µ–π
        patches_buttons = ttk.Frame(patches_frame)
        patches_buttons.grid(row=1, column=0, columnspan=2, pady=(0, 20))
        
        ttk.Button(patches_buttons, text="üì¶ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—á", 
                  command=self.standard_patch).grid(row=0, column=0, padx=5, pady=5)
        
        ttk.Button(patches_buttons, text="üíæ Toshiba HDWT860", 
                  command=self.toshiba_patch).grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(patches_buttons, text="üî¥ WD Red", 
                  command=self.wd_red_patch).grid(row=0, column=2, padx=5, pady=5)
        
        ttk.Button(patches_buttons, text="üê∫ Seagate IronWolf", 
                  command=self.seagate_patch).grid(row=0, column=3, padx=5, pady=5)
        
        ttk.Button(patches_buttons, text="‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á", 
                  command=self.aggressive_patch).grid(row=0, column=4, padx=5, pady=5)
        
        # –û–ø—Ü–∏–∏ –ø–∞—Ç—á–µ–π
        options_frame = ttk.LabelFrame(patches_frame, text="‚öôÔ∏è –û–ø—Ü–∏–∏ –ø–∞—Ç—á–µ–π", padding="15")
        options_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        self.create_backup_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", 
                       variable=self.create_backup_var).grid(row=0, column=0, sticky=tk.W)
        
        self.auto_restart_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(options_frame, text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ NAS", 
                       variable=self.auto_restart_var).grid(row=1, column=0, sticky=tk.W)
        
        self.force_patch_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(options_frame, text="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", 
                       variable=self.force_patch_var).grid(row=2, column=0, sticky=tk.W)
    
    def setup_diagnostics_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        diag_frame = ttk.Frame(self.notebook, padding="20")
        self.notebook.add(diag_frame, text="üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
        info_frame = ttk.LabelFrame(diag_frame, text="‚ÑπÔ∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", padding="15")
        info_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        diag_info = """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NAS
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã DSM
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤
‚Ä¢ –¢–µ—Å—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"""
        
        ttk.Label(info_frame, text=diag_info, justify=tk.LEFT).grid(row=0, column=0)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diag_buttons = ttk.Frame(diag_frame)
        diag_buttons.grid(row=1, column=0, columnspan=2, pady=(0, 20))
        
        ttk.Button(diag_buttons, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", 
                  command=self.test_connection).grid(row=0, column=0, padx=5, pady=5)
        
        ttk.Button(diag_buttons, text="üñ•Ô∏è –ê–Ω–∞–ª–∏–∑ DSM", 
                  command=self.analyze_dsm).grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(diag_buttons, text="üíæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Å–∫–∏", 
                  command=self.check_disks).grid(row=0, column=2, padx=5, pady=5)
        
        ttk.Button(diag_buttons, text="üîê –¢–µ—Å—Ç SSH", 
                  command=self.test_ssh).grid(row=0, column=3, padx=5, pady=5)
        
        ttk.Button(diag_buttons, text="üìä –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤", 
                  command=self.analyze_logs).grid(row=0, column=4, padx=5, pady=5)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        results_frame = ttk.LabelFrame(diag_frame, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏", padding="15")
        results_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.diag_text = scrolledtext.ScrolledText(results_frame, height=20, width=100)
        self.diag_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        diag_frame.columnconfigure(1, weight=1)
        diag_frame.rowconfigure(2, weight=1)
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(0, weight=1)
    
    def setup_logs_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ª–æ–≥–æ–≤"""
        logs_frame = ttk.Frame(self.notebook, padding="20")
        self.notebook.add(logs_frame, text="üìã –õ–æ–≥–∏")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö
        info_frame = ttk.LabelFrame(logs_frame, text="‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", padding="15")
        info_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        logs_info = """4 —Ç–∏–ø–∞ –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:
‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ - –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ SSH –ª–æ–≥ - –≤—Å–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥ - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –õ–æ–≥ –æ—à–∏–±–æ–∫ - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        
        ttk.Label(info_frame, text=logs_info, justify=tk.LEFT).grid(row=0, column=0)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        logs_buttons = ttk.Frame(logs_frame)
        logs_buttons.grid(row=1, column=0, columnspan=2, pady=(0, 20))
        
        ttk.Button(logs_buttons, text="üìã –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥", 
                  command=lambda: self.show_log('main')).grid(row=0, column=0, padx=5, pady=5)
        
        ttk.Button(logs_buttons, text="üîê SSH –ª–æ–≥", 
                  command=lambda: self.show_log('ssh')).grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Button(logs_buttons, text="üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥", 
                  command=lambda: self.show_log('system')).grid(row=0, column=2, padx=5, pady=5)
        
        ttk.Button(logs_buttons, text="‚ùå –õ–æ–≥ –æ—à–∏–±–æ–∫", 
                  command=lambda: self.show_log('error')).grid(row=0, column=3, padx=5, pady=5)
        
        ttk.Button(logs_buttons, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", 
                  command=self.clear_logs).grid(row=0, column=4, padx=5, pady=5)
        
        ttk.Button(logs_buttons, text="üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –ª–æ–≥–æ–≤", 
                  command=self.open_logs_folder).grid(row=0, column=5, padx=5, pady=5)
        
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
        logs_display_frame = ttk.LabelFrame(logs_frame, text="üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞", padding="15")
        logs_display_frame.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.logs_text = scrolledtext.ScrolledText(logs_display_frame, height=20, width=100)
        self.logs_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        logs_frame.columnconfigure(1, weight=1)
        logs_frame.rowconfigure(2, weight=1)
        logs_display_frame.columnconfigure(0, weight=1)
        logs_display_frame.rowconfigure(0, weight=1)
    
    def setup_settings_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_frame = ttk.Frame(self.notebook, padding="20")
        self.notebook.add(settings_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        general_frame = ttk.LabelFrame(settings_frame, text="üîß –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding="15")
        general_frame.grid(row=0, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.auto_save_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(general_frame, text="–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
                       variable=self.auto_save_var).grid(row=0, column=0, sticky=tk.W)
        
        # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        ttk.Label(general_frame, text="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.log_level_var = tk.StringVar(value="INFO")
        log_level_combo = ttk.Combobox(general_frame, textvariable=self.log_level_var, 
                                      values=["DEBUG", "INFO", "WARNING", "ERROR"], width=15)
        log_level_combo.grid(row=1, column=1, sticky=tk.W, padx=(10, 0))
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
        ttk.Label(general_frame, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (MB):").grid(row=2, column=0, sticky=tk.W, pady=5)
        self.max_log_size_var = tk.StringVar(value="10")
        ttk.Entry(general_frame, textvariable=self.max_log_size_var, width=15).grid(row=2, column=1, sticky=tk.W, padx=(10, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSH
        ssh_frame = ttk.LabelFrame(settings_frame, text="üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSH", padding="15")
        ssh_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 20))
        
        # –¢–∞–π–º–∞—É—Ç SSH
        ttk.Label(ssh_frame, text="–¢–∞–π–º–∞—É—Ç SSH (—Å–µ–∫—É–Ω–¥—ã):").grid(row=0, column=0, sticky=tk.W, pady=5)
        self.ssh_timeout_var = tk.StringVar(value="30")
        ttk.Entry(ssh_frame, textvariable=self.ssh_timeout_var, width=15).grid(row=0, column=1, sticky=tk.W, padx=(10, 0))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        ttk.Label(ssh_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.ssh_retries_var = tk.StringVar(value="3")
        ttk.Entry(ssh_frame, textvariable=self.ssh_retries_var, width=15).grid(row=1, column=1, sticky=tk.W, padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(settings_frame)
        buttons_frame.grid(row=2, column=0, columnspan=2, pady=(0, 20))
        
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.save_settings).grid(row=0, column=0, padx=5)
        
        ttk.Button(buttons_frame, text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.reset_settings).grid(row=0, column=1, padx=5)
        
        ttk.Button(buttons_frame, text="üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 
                  command=self.open_config_folder).grid(row=0, column=2, padx=5)
    
    def setup_status_bar(self, parent):
        """–°—Ç–∞—Ç—É—Å –±–∞—Ä"""
        status_frame = ttk.Frame(parent)
        status_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
        
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        ttk.Label(status_frame, textvariable=self.status_var).grid(row=0, column=0, sticky=tk.W)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status = ttk.Label(status_frame, text="‚óè", foreground="red")
        self.connection_status.grid(row=0, column=1, padx=(20, 0))
        
        # –í—Ä–µ–º—è
        self.time_var = tk.StringVar()
        ttk.Label(status_frame, textvariable=self.time_var).grid(row=0, column=2, sticky=tk.E)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.update_time()
    
    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–µ"""
        current_time = datetime.now().strftime("%H:%M:%S")
        self.time_var.set(current_time)
        self.root.after(1000, self.update_time)
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if os.path.exists("config_pro.json"):
                with open("config_pro.json", "r", encoding="utf-8") as f:
                    config = json.load(f)
                    self.ip_var.set(config.get("ip", "192.168.1.100"))
                    self.login_var.set(config.get("login", "admin"))
                    self.auto_save_var.set(config.get("auto_save", True))
                    self.log_level_var.set(config.get("log_level", "INFO"))
                    self.max_log_size_var.set(config.get("max_log_size", "10"))
                    self.ssh_timeout_var.set(config.get("ssh_timeout", "30"))
                    self.ssh_retries_var.set(config.get("ssh_retries", "3"))
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", 'error')
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = {
            "ip": self.ip_var.get(),
            "login": self.login_var.get(),
            "auto_save": self.auto_save_var.get(),
            "log_level": self.log_level_var.get(),
            "max_log_size": self.max_log_size_var.get(),
            "ssh_timeout": self.ssh_timeout_var.get(),
            "ssh_retries": self.ssh_retries_var.get()
        }
        
        try:
            with open("config_pro.json", "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            self.log("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", 'info')
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", 'error')
    
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NAS"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NAS...", 'info')
        self.progress_bar.start()
        self.progress_var.set("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        def test():
            try:
                ip = self.ip_var.get()
                login = self.login_var.get()
                password = self.password_var.get()
                
                if not all([ip, login, password]):
                    self.log("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", 'error')
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
                result = subprocess.run(['ping', '-n', '1', ip], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode != 0:
                    self.log("NAS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping", 'error')
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH
                ssh = self.connect_ssh(ip, login, password)
                if not ssh:
                    self.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ SSH", 'error')
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ DSM
                stdin, stdout, stderr = ssh.exec_command("cat /etc.defaults/VERSION")
                version = stdout.read().decode().strip()
                self.log(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. DSM –≤–µ—Ä—Å–∏—è: {version}", 'info')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ sudo
                if self.use_sudo_var.get():
                    self.log("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ sudo –¥–æ—Å—Ç—É–ø–∞...", 'info', 'ssh')
                    output, error, exit_code = self.execute_ssh_command(ssh, "whoami", use_sudo=True)
                    if "root" in output:
                        self.log("‚úÖ Sudo –¥–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç root", 'info')
                    else:
                        self.log("‚ö†Ô∏è Sudo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 'warning')
                        self.log(f"–í—ã–≤–æ–¥: {output}", 'debug', 'ssh')
                        self.log(f"–û—à–∏–±–∫–∞: {error}", 'debug', 'ssh')
                
                ssh.close()
                self.progress_var.set("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                self.connection_status.config(foreground="green")
                
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", 'error')
                self.progress_var.set("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                self.connection_status.config(foreground="red")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=test, daemon=True).start()
    
    def connect_ssh(self, ip, login, password):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            self.log(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {ip} –∫–∞–∫ {login}...", 'info', 'ssh')
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(ip, username=login, password=password, timeout=30)
            self.log("SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", 'info', 'ssh')
            return ssh
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", 'error', 'ssh')
            return None
    
    def execute_ssh_command(self, ssh, command, use_sudo=False):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ SSH —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π sudo"""
        try:
            if use_sudo and self.use_sudo_var.get():
                # –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ root —á–µ—Ä–µ–∑ sudo su
                self.log(f"üîê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ root —á–µ—Ä–µ–∑ sudo su...", 'info', 'ssh')
                self.log(f"üíª >>> sudo su", 'info', 'ssh')
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è sudo su
                transport = ssh.get_transport()
                channel = transport.open_session()
                channel.get_pty()
                channel.invoke_shell()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É sudo su
                channel.send("sudo su\n")
                time.sleep(1)
                
                # –ß–∏—Ç–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–æ–ª—è
                response = ""
                password_prompt_found = False
                timeout = 0
                max_timeout = 50  # 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                
                while not password_prompt_found and timeout < max_timeout:
                    if channel.recv_ready():
                        data = channel.recv(1024).decode('utf-8', errors='ignore')
                        response += data
                        if data.strip():
                            self.log(f"üíª <<< {data.strip()}", 'info', 'ssh')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
                        if ("password for" in data.lower() or 
                            "password:" in data.lower() or 
                            "password" in data.lower()):
                            password_prompt_found = True
                            break
                    
                    time.sleep(0.1)
                    timeout += 1
                
                if not password_prompt_found:
                    self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–±—É–µ–º –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å...", 'warning', 'ssh')
                
                self.log(f"üîë –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è sudo...", 'info', 'ssh')
                self.log(f"üíª >>> [–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç]", 'info', 'ssh')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
                channel.send(f"{self.password_var.get()}\n")
                time.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                
                # –ñ–¥–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è root
                response = ""
                root_prompt_found = False
                timeout = 0
                max_timeout = 100  # 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                
                while not root_prompt_found and timeout < max_timeout:
                    if channel.recv_ready():
                        data = channel.recv(1024).decode('utf-8', errors='ignore')
                        response += data
                        if data.strip():
                            self.log(f"üíª <<< {data.strip()}", 'info', 'ssh')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è root
                        if ("#" in data and ("root@" in data or "root:" in data)) or data.endswith("#"):
                            root_prompt_found = True
                            break
                    
                    time.sleep(0.1)
                    timeout += 1
                
                if not root_prompt_found:
                    self.log(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ root, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...", 'warning', 'ssh')
                
                self.log(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ root", 'info', 'ssh')
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç root
                self.log(f"üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç root: {command}", 'info', 'ssh')
                self.log(f"üíª >>> {command}", 'info', 'ssh')
                channel.send(f"{command}\n")
                time.sleep(2)
                
                # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                output = ""
                timeout = 0
                max_timeout = 200  # 20 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                
                while timeout < max_timeout:
                    if channel.recv_ready():
                        data = channel.recv(1024).decode('utf-8', errors='ignore')
                        output += data
                        if data.strip():
                            self.log(f"üíª <<< {data.strip()}", 'info', 'ssh')
                        timeout = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                    else:
                        timeout += 1
                    time.sleep(0.1)
                
                # –í—ã—Ö–æ–¥–∏–º –∏–∑ root
                self.log(f"üíª >>> exit", 'info', 'ssh')
                channel.send("exit\n")
                time.sleep(1)
                channel.close()
                
                self.log(f"‚úÖ –í—ã–≤–æ–¥: {output.strip()}", 'info', 'ssh')
                return output, "", 0
                
            else:
                # –û–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                self.log(f"üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command}", 'info', 'ssh')
                self.log(f"üíª >>> {command}", 'info', 'ssh')
                
                stdin, stdout, stderr = ssh.exec_command(command)
                
                # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                import select
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                while not stdout.channel.exit_status_ready():
                    if select.select([stdout.channel], [], [], 1)[0]:
                        pass
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
                exit_status = stdout.channel.recv_exit_status()
                
                # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥
                output = stdout.read().decode('utf-8', errors='ignore')
                error = stderr.read().decode('utf-8', errors='ignore')
                
                self.log(f"üìä –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {exit_status}", 'debug', 'ssh')
                
                if output:
                    self.log(f"üíª <<< {output.strip()}", 'info', 'ssh')
                if error:
                    self.log(f"üíª <<< ERROR: {error.strip()}", 'warning', 'ssh')
                
                if exit_status != 0:
                    self.log(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {exit_status})", 'error', 'ssh')
                
                return output, error, exit_status
            
        except Exception as e:
            self.log(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}", 'error', 'ssh')
            return "", str(e), -1
    
    def quick_start(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞...", 'info')
        self.progress_bar.start()
        self.progress_var.set("–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç...")
        
        def start():
            try:
                ip = self.ip_var.get()
                login = self.login_var.get()
                password = self.password_var.get()
                
                if not all([ip, login, password]):
                    self.log("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", 'error')
                    return
                
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                ssh = self.connect_ssh(ip, login, password)
                if not ssh:
                    self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", 'error')
                    return
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—á
                self.log("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ç—á–∞...", 'info')
                self.apply_standard_patch(ssh)
                
                ssh.close()
                self.log("‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", 'info')
                self.progress_var.set("–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞: {e}", 'error')
                self.progress_var.set("–û—à–∏–±–∫–∞")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=start, daemon=True).start()
    
    def apply_standard_patch(self, ssh):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ç—á–∞ (–ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥)"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            self.log("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...", 'info', 'system')
            backup_script = """
            BACKUP_DIR="/tmp/synology_backup_$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR
            cp /etc.defaults/synoinfo.conf $BACKUP_DIR/ 2>/dev/null || echo "synoinfo.conf not found"
            echo "Backup created in $BACKUP_DIR"
            """
            output, error, code = self.execute_ssh_command(ssh, backup_script, use_sudo=True)
            self.log(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {output.strip()}", 'info', 'system')
            
            # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è synoinfo.conf –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            self.log("üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è /etc.defaults/synoinfo.conf...", 'info', 'system')
            self.log("üíª >>> sudo -i", 'info', 'ssh')
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ—à–∞–≥–æ–≤–æ –∫–∞–∫ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            commands = [
                "sudo -i",
                "sed -i 's/support_disk_compatibility=\"yes\"/support_disk_compatibility=\"no\"/g' /etc.defaults/synoinfo.conf",
                "echo 'support_disk_compatibility=\"no\"' >> /etc.defaults/synoinfo.conf",
                "echo 'support_disk_compatibility_override=\"yes\"' >> /etc.defaults/synoinfo.conf",
                "echo 'Disk compatibility check disabled'",
                "exit"
            ]
            
            for cmd in commands:
                self.log(f"üíª >>> {cmd}", 'info', 'ssh')
                output, error, code = self.execute_ssh_command(ssh, cmd, use_sudo=True)
                if output.strip():
                    self.log(f"üíª <<< {output.strip()}", 'info', 'ssh')
                if error.strip():
                    self.log(f"üíª <<< ERROR: {error.strip()}", 'warning', 'ssh')
            
            self.log("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", 'info', 'system')
            self.log("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å NAS –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", 'info', 'system')
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–∞: {e}", 'error')
    
    def toshiba_fix(self):
        """–§–∏–∫—Å –¥–ª—è Toshiba HDWT860"""
        self.log("üíæ –ó–∞–ø—É—Å–∫ —Ñ–∏–∫—Å–∞ –¥–ª—è Toshiba HDWT860...", 'info')
        self.progress_bar.start()
        self.progress_var.set("–§–∏–∫—Å Toshiba HDWT860...")
        
        def fix():
            try:
                ip = self.ip_var.get()
                login = self.login_var.get()
                password = self.password_var.get()
                
                if not all([ip, login, password]):
                    self.log("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", 'error')
                    return
                
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                ssh = self.connect_ssh(ip, login, password)
                if not ssh:
                    self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", 'error')
                    return
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è Toshiba
                self.log("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞ –¥–ª—è Toshiba HDWT860...", 'info')
                self.apply_toshiba_fix(ssh)
                
                ssh.close()
                self.log("‚úÖ –§–∏–∫—Å Toshiba HDWT860 –∑–∞–≤–µ—Ä—à–µ–Ω", 'info')
                self.progress_var.set("–§–∏–∫—Å –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞ Toshiba: {e}", 'error')
                self.progress_var.set("–û—à–∏–±–∫–∞")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=fix, daemon=True).start()
    
    def apply_toshiba_fix(self, ssh):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞ –¥–ª—è Toshiba HDWT860"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            self.log("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...", 'info', 'system')
            backup_script = """
            BACKUP_DIR="/tmp/toshiba_fix_backup_$(date +%Y%m%d_%H%M%S)"
            mkdir -p $BACKUP_DIR
            cp /etc/synoinfo.conf $BACKUP_DIR/ 2>/dev/null || echo "synoinfo.conf not found"
            cp /usr/syno/bin/synocheck $BACKUP_DIR/ 2>/dev/null || echo "synocheck not found"
            echo "Backup created in $BACKUP_DIR"
            """
            output, error, code = self.execute_ssh_command(ssh, backup_script, use_sudo=True)
            self.log(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {output.strip()}", 'info', 'system')
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è Toshiba HDWT860
            self.log("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞ –¥–ª—è Toshiba HDWT860...", 'info', 'system')
            toshiba_script = """
            #!/bin/bash
            echo "Applying Toshiba HDWT860 special fix..."
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            cp /etc/synoinfo.conf /etc/synoinfo.conf.backup
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            sed -i '/support_disk_compatibility/d' /etc/synoinfo.conf
            sed -i '/support_disk_compatibility_check/d' /etc/synoinfo.conf
            sed -i '/support_disk_compatibility_override/d' /etc/synoinfo.conf
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Toshiba HDWT860
            cat >> /etc/synoinfo.conf << 'EOF'
            
            # Synology Drive Unlocker - Toshiba HDWT860 Special Fix
            support_disk_compatibility="no"
            support_disk_compatibility_check="no"
            support_disk_compatibility_override="yes"
            support_disk_compatibility_force="yes"
            
            # Specific Toshiba HDWT860 settings
            support_toshiba_hdwt860="yes"
            support_toshiba_hdwt860_5tb="yes"
            support_toshiba_hdwt860_6tb="yes"
            support_toshiba_hdwt860_8tb="yes"
            
            # Disk compatibility overrides
            support_disk_compatibility_override_toshiba="yes"
            support_disk_compatibility_override_hdwt860="yes"
            support_disk_compatibility_override_5tb="yes"
            support_disk_compatibility_override_6tb="yes"
            support_disk_compatibility_override_8tb="yes"
            
            # Force disk recognition
            support_disk_force_recognition="yes"
            support_disk_force_recognition_toshiba="yes"
            support_disk_force_recognition_hdwt860="yes"
            
            # Disable all disk checks
            support_disk_compatibility_disable="yes"
            support_disk_compatibility_disable_all="yes"
            support_disk_compatibility_disable_toshiba="yes"
            support_disk_compatibility_disable_hdwt860="yes"
            EOF
            
            echo "Toshiba HDWT860 special fix applied to synoinfo.conf"
            """
            output, error, code = self.execute_ssh_command(ssh, toshiba_script, use_sudo=True)
            self.log(f"‚úÖ Toshiba —Ñ–∏–∫—Å synoinfo.conf: {output.strip()}", 'info', 'system')
            
            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è synocheck –¥–ª—è Toshiba
            self.log("üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è synocheck –¥–ª—è Toshiba...", 'info', 'system')
            synocheck_script = """
            #!/bin/bash
            echo "Modifying synocheck for Toshiba HDWT860..."
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            cp /usr/syno/bin/synocheck /usr/syno/bin/synocheck.backup
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π synocheck –¥–ª—è Toshiba
            cat > /usr/syno/bin/synocheck << 'EOF'
            #!/bin/bash
            # Synology Drive Unlocker - Toshiba HDWT860 Special Fix
            
            # Check if this is a disk compatibility check
            if [[ "$*" == *"disk"* ]] || [[ "$*" == *"compatibility"* ]] || [[ "$*" == *"toshiba"* ]] || [[ "$*" == *"hdwt860"* ]]; then
                echo "Disk compatibility check bypassed for Toshiba HDWT860"
                exit 0
            fi
            
            # For other checks, try to run original if it exists
            if [ -f /usr/syno/bin/synocheck.original ]; then
                exec /usr/syno/bin/synocheck.original "$@"
            else
                exit 0
            fi
            EOF
            
            chmod +x /usr/syno/bin/synocheck
            echo "synocheck modified for Toshiba HDWT860"
            """
            output, error, code = self.execute_ssh_command(ssh, synocheck_script, use_sudo=True)
            self.log(f"‚úÖ synocheck Toshiba: {output.strip()}", 'info', 'system')
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±
            self.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±...", 'info', 'system')
            restart_script = """
            /usr/syno/bin/synopkg restart pkgctl-WebStation 2>/dev/null || echo "WebStation restart failed"
            /usr/syno/bin/synopkg restart pkgctl-Docker 2>/dev/null || echo "Docker restart failed"
            /usr/syno/bin/synopkg restart pkgctl-StorageManager 2>/dev/null || echo "StorageManager restart failed"
            echo "Services restarted for Toshiba HDWT860"
            """
            output, error, code = self.execute_ssh_command(ssh, restart_script, use_sudo=True)
            self.log(f"üîÑ –°–ª—É–∂–±—ã Toshiba: {output.strip()}", 'info', 'system')
            
            self.log("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è Toshiba HDWT860 –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", 'info')
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–∫—Å–∞ Toshiba: {e}", 'error')
    
    def aggressive_patch(self):
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á"""
        self.log("–ó–∞–ø—É—Å–∫ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—á–∞...", 'info')
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—á–∞
        pass
    
    def standard_patch(self):
        """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—á"""
        self.log("–ó–∞–ø—É—Å–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ç—á–∞...", 'info')
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ç—á–∞
        pass
    
    def toshiba_patch(self):
        """–ü–∞—Ç—á –¥–ª—è Toshiba"""
        self.log("–ó–∞–ø—É—Å–∫ –ø–∞—Ç—á–∞ –¥–ª—è Toshiba...", 'info')
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞—Ç—á–∞ Toshiba
        pass
    
    def wd_red_patch(self):
        """–ü–∞—Ç—á –¥–ª—è WD Red"""
        self.log("–ó–∞–ø—É—Å–∫ –ø–∞—Ç—á–∞ –¥–ª—è WD Red...", 'info')
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞—Ç—á–∞ WD Red
        pass
    
    def seagate_patch(self):
        """–ü–∞—Ç—á –¥–ª—è Seagate IronWolf"""
        self.log("–ó–∞–ø—É—Å–∫ –ø–∞—Ç—á–∞ –¥–ª—è Seagate IronWolf...", 'info')
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞—Ç—á–∞ Seagate
        pass
    
    def analyze_dsm(self):
        """–ê–Ω–∞–ª–∏–∑ DSM"""
        self.log("–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã DSM...", 'info')
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DSM
        pass
    
    def check_disks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤...", 'info')
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–æ–≤
        pass
    
    def test_ssh(self):
        """–¢–µ—Å—Ç SSH"""
        self.log("–¢–µ—Å—Ç SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...", 'info')
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ç–µ—Å—Ç–∞ SSH
        pass
    
    def analyze_logs(self):
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"""
        self.log("–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤...", 'info')
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤
        pass
    
    def show_log(self, log_type):
        """–ü–æ–∫–∞–∑ –ª–æ–≥–∞"""
        log_file = f"logs/{log_type}.log"
        if os.path.exists(log_file):
            with open(log_file, "r", encoding="utf-8") as f:
                content = f.read()
            self.logs_text.delete(1.0, tk.END)
            self.logs_text.insert(1.0, content)
        else:
            self.logs_text.delete(1.0, tk.END)
            self.logs_text.insert(1.0, f"–õ–æ–≥ {log_type} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        for log_type in ['main', 'ssh', 'system', 'error']:
            log_file = f"logs/{log_type}.log"
            if os.path.exists(log_file):
                with open(log_file, "w", encoding="utf-8") as f:
                    f.write("")
        self.log("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", 'info')
    
    def open_logs_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –ª–æ–≥–æ–≤"""
        os.startfile("logs")
    
    def open_config_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        os.startfile(".")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.save_config()
        self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", 'info')
    
    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.ip_var.set("192.168.1.100")
        self.login_var.set("admin")
        self.auto_save_var.set(True)
        self.log_level_var.set("INFO")
        self.max_log_size_var.set("10")
        self.ssh_timeout_var.set("30")
        self.ssh_retries_var.set("3")
        self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã", 'info')

def main():
    root = tk.Tk()
    app = SynologyUnlockerPro(root)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    def on_closing():
        app.save_config()
        root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()
