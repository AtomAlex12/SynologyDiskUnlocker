#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import shutil
import re

def clean_project():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    temp_files = [
        '*.log',
        '*.tmp',
        '*.cache',
        'config*.json',
        '*.pyc',
        '__pycache__',
        '.pytest_cache',
        '*.spec'
    ]
    
    for pattern in temp_files:
        if '*' in pattern:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º glob –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
            import glob
            for file in glob.glob(pattern):
                try:
                    if os.path.isfile(file):
                        os.remove(file)
                        print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
                except:
                    pass
        else:
            try:
                if os.path.exists(pattern):
                    if os.path.isfile(pattern):
                        os.remove(pattern)
                    else:
                        shutil.rmtree(pattern)
                    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞/—Ñ–∞–π–ª: {pattern}")
            except:
                pass
    
    # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ —Å–±–æ—Ä–∫–∏
    build_dirs = ['build', 'dist', 'logs', '__pycache__']
    for dir_name in build_dirs:
        if os.path.exists(dir_name):
            try:
                shutil.rmtree(dir_name)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_name}")
            except:
                pass
    
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –æ—Ç –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    files_to_clean = [
        'synology_unlocker_simple.py',
        'synology_unlocker_final.py',
        'synology_unlocker_pro.py'
    ]
    
    for file_name in files_to_clean:
        if os.path.exists(file_name):
            clean_file_content(file_name)
    
    print("‚úÖ –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω –æ—Ç –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")

def clean_file_content(filename):
    """–û—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –æ—Ç –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ó–∞–º–µ–Ω—è–µ–º IP –∞–¥—Ä–µ—Å–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä—ã
        content = re.sub(r'\b192\.168\.\d+\.\d+\b', '192.168.1.100', content)
        content = re.sub(r'\b10\.\d+\.\d+\.\d+\b', '192.168.1.100', content)
        content = re.sub(r'\b172\.\d+\.\d+\.\d+\b', '192.168.1.100', content)
        
        # –ó–∞–º–µ–Ω—è–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        content = re.sub(r'\balex\b', 'admin', content, flags=re.IGNORECASE)
        content = re.sub(r'\b–ê–ª–µ–∫—Å–∞–Ω–¥—Ä\b', 'User', content)
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        content = re.sub(r'C:\\Users\\[^\\]+\\', 'C:\\Users\\User\\', content)
        content = re.sub(r'D:\\projekt\\[^\\]+\\', 'D:\\project\\NAS\\', content)
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ –û—á–∏—â–µ–Ω —Ñ–∞–π–ª: {filename}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {filename}: {e}")

if __name__ == "__main__":
    clean_project()
