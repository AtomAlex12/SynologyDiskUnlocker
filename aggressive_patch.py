#!/usr/bin/env python3
"""
Synology Drive Unlocker - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Synology
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import subprocess
import os
import sys
import json
import threading
import time
import requests
import socket
from pathlib import Path
import paramiko

class AggressivePatch:
    def __init__(self, root):
        self.root = root
        self.root.title("Synology Drive Unlocker - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        self.setup_ui()
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—á–∞"""
        
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á Synology", 
                               font=("Arial", 18, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        warning_frame = ttk.LabelFrame(main_frame, text="‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï", padding="10")
        warning_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        warning_text = """–≠—Ç–æ—Ç –ø–∞—Ç—á –ø—Ä–∏–º–µ–Ω—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏!

–í–ù–ò–ú–ê–ù–ò–ï: –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ DSM!"""
        
        ttk.Label(warning_frame, text=warning_text, justify=tk.LEFT, 
                 foreground="red").grid(row=0, column=0)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        settings_frame = ttk.LabelFrame(main_frame, text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", padding="10")
        settings_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # IP –∞–¥—Ä–µ—Å
        ttk.Label(settings_frame, text="IP –∞–¥—Ä–µ—Å NAS:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.ip_var = tk.StringVar(value="192.168.1.100")
        ttk.Entry(settings_frame, textvariable=self.ip_var, width=20).grid(row=0, column=1, sticky=tk.W, padx=(5, 0))
        
        # –õ–æ–≥–∏–Ω
        ttk.Label(settings_frame, text="–õ–æ–≥–∏–Ω:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.login_var = tk.StringVar(value="admin")
        ttk.Entry(settings_frame, textvariable=self.login_var, width=20).grid(row=1, column=1, sticky=tk.W, padx=(5, 0))
        
        # –ü–∞—Ä–æ–ª—å
        ttk.Label(settings_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.password_var = tk.StringVar()
        ttk.Entry(settings_frame, textvariable=self.password_var, show="*", width=20).grid(row=2, column=1, sticky=tk.W, padx=(5, 0))
        
        # –û–ø—Ü–∏–∏ –ø–∞—Ç—á–∞
        options_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –û–ø—Ü–∏–∏ –ø–∞—Ç—á–∞", padding="10")
        options_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.force_patch_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—á (–æ–±—Ö–æ–¥ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)", 
                       variable=self.force_patch_var).grid(row=0, column=0, sticky=tk.W)
        
        self.disable_checks_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–∏—Å–∫–æ–≤", 
                       variable=self.disable_checks_var).grid(row=1, column=0, sticky=tk.W)
        
        self.modify_binaries_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", 
                       variable=self.modify_binaries_var).grid(row=2, column=0, sticky=tk.W)
        
        self.create_hooks_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ö—É–∫–æ–≤", 
                       variable=self.create_hooks_var).grid(row=3, column=0, sticky=tk.W)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=4, column=0, columnspan=3, pady=(0, 10))
        
        ttk.Button(buttons_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", 
                  command=self.test_connection).grid(row=0, column=0, padx=(0, 5))
        
        ttk.Button(buttons_frame, text="‚ö° –ü–†–ò–ú–ï–ù–ò–¢–¨ –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ü–ê–¢–ß", 
                  command=self.apply_aggressive_patch, style="Accent.TButton").grid(row=0, column=1, padx=5)
        
        ttk.Button(buttons_frame, text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                  command=self.restore_system).grid(row=0, column=2, padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        ttk.Label(main_frame, textvariable=self.progress_var).grid(row=5, column=0, columnspan=3, sticky=tk.W, pady=(0, 5))
        
        self.progress_bar = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress_bar.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(main_frame, text="üìù –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π", padding="5")
        log_frame.grid(row=7, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 0))
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, width=80)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(2, weight=1)
        main_frame.rowconfigure(7, weight=1)
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NAS"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NAS...")
        self.progress_bar.start()
        self.progress_var.set("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        def test():
            try:
                ip = self.ip_var.get()
                login = self.login_var.get()
                password = self.password_var.get()
                
                if not all([ip, login, password]):
                    self.log("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
                result = subprocess.run(['ping', '-n', '1', ip], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode != 0:
                    self.log("‚ùå NAS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ip, username=login, password=password, timeout=10)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ DSM
                stdin, stdout, stderr = ssh.exec_command("cat /etc.defaults/VERSION")
                version = stdout.read().decode().strip()
                self.log(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. DSM –≤–µ—Ä—Å–∏—è: {version}")
                
                ssh.close()
                self.progress_var.set("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                self.progress_var.set("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=test, daemon=True).start()
    
    def apply_aggressive_patch(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—á–∞"""
        self.log("‚ö° –ù–∞—á–∏–Ω–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á...")
        self.progress_bar.start()
        self.progress_var.set("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—á–∞...")
        
        def patch():
            try:
                ip = self.ip_var.get()
                login = self.login_var.get()
                password = self.password_var.get()
                
                if not all([ip, login, password]):
                    self.log("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    return
                
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ip, username=login, password=password, timeout=10)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                self.log("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
                self.create_backup(ssh)
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—á–∞
                self.log("‚ö° –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—á–∞...")
                self.apply_aggressive_patch_script(ssh)
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±
                self.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±...")
                self.restart_services(ssh)
                
                ssh.close()
                
                self.log("‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.log("üéâ –¢–µ–ø–µ—Ä—å –¥–∏—Å–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å!")
                self.progress_var.set("–ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                messagebox.showinfo("–£—Å–ø–µ—Ö!", 
                    "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                    "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ NAS –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Å–∫–∏.\n"
                    "–î–∏—Å–∫–∏ –¥–æ–ª–∂–Ω—ã –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∞: {e}")
                self.progress_var.set("–û—à–∏–±–∫–∞ –ø–∞—Ç—á–∞")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=patch, daemon=True).start()
    
    def create_backup(self, ssh):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        backup_script = """
        #!/bin/bash
        BACKUP_DIR="/tmp/aggressive_backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p $BACKUP_DIR
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        cp /etc/synoinfo.conf $BACKUP_DIR/ 2>/dev/null
        cp /etc.defaults/synoinfo.conf $BACKUP_DIR/ 2>/dev/null
        cp /usr/syno/bin/synocheck $BACKUP_DIR/ 2>/dev/null
        cp -r /usr/syno/bin/ $BACKUP_DIR/bin_backup/ 2>/dev/null
        cp -r /etc/ $BACKUP_DIR/etc_backup/ 2>/dev/null
        
        echo "Backup created in $BACKUP_DIR"
        """
        
        stdin, stdout, stderr = ssh.exec_command(backup_script)
        output = stdout.read().decode()
        self.log(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {output.strip()}")
    
    def apply_aggressive_patch_script(self, ssh):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –ø–∞—Ç—á–∞"""
        patch_script = """
        #!/bin/bash
        
        echo "Applying aggressive patch..."
        
        # 1. –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ synoinfo.conf
        echo "Modifying synoinfo.conf..."
        cp /etc/synoinfo.conf /etc/synoinfo.conf.backup
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–æ–≤
        sed -i '/support_disk_compatibility/d' /etc/synoinfo.conf
        sed -i '/support_disk_compatibility_check/d' /etc/synoinfo.conf
        sed -i '/support_disk_compatibility_override/d' /etc/synoinfo.conf
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        cat >> /etc/synoinfo.conf << 'EOF'
# Synology Drive Unlocker - Aggressive Patch
support_disk_compatibility="no"
support_disk_compatibility_check="no"
support_disk_compatibility_override="yes"
support_disk_compatibility_force="yes"
support_disk_compatibility_bypass="yes"
support_disk_compatibility_ignore="yes"
support_disk_compatibility_disable="yes"
EOF
        
        # 2. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è synocheck
        echo "Modifying synocheck..."
        cp /usr/syno/bin/synocheck /usr/syno/bin/synocheck.backup
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π synocheck –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å–ø–µ—Ö
        cat > /usr/syno/bin/synocheck << 'EOF'
#!/bin/bash
# Synology Drive Unlocker - Patched synocheck
# Always returns success for disk compatibility checks

case "$1" in
    "disk_compatibility"|"compatibility"|"disk")
        echo "Disk compatibility check bypassed by Synology Drive Unlocker"
        exit 0
        ;;
    *)
        # For other checks, try to run original if it exists
        if [ -f /usr/syno/bin/synocheck.original ]; then
            exec /usr/syno/bin/synocheck.original "$@"
        else
            exit 0
        fi
        ;;
esac
EOF
        
        chmod +x /usr/syno/bin/synocheck
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ö—É–∫–æ–≤
        echo "Creating system hooks..."
        
        # –•—É–∫ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        cat > /usr/local/bin/disable_disk_checks.sh << 'EOF'
#!/bin/bash
# Disable disk compatibility checks on boot

# Override synoinfo.conf
sed -i 's/support_disk_compatibility="yes"/support_disk_compatibility="no"/g' /etc/synoinfo.conf
sed -i 's/support_disk_compatibility_check="yes"/support_disk_compatibility_check="no"/g' /etc/synoinfo.conf

# Ensure our settings are applied
echo "support_disk_compatibility=\"no\"" >> /etc/synoinfo.conf
echo "support_disk_compatibility_check=\"no\"" >> /etc/synoinfo.conf
echo "support_disk_compatibility_override=\"yes\"" >> /etc/synoinfo.conf
EOF
        
        chmod +x /usr/local/bin/disable_disk_checks.sh
        
        # 4. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        echo "Modifying additional files..."
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º /etc.defaults/synoinfo.conf
        if [ -f /etc.defaults/synoinfo.conf ]; then
            cp /etc.defaults/synoinfo.conf /etc.defaults/synoinfo.conf.backup
            sed -i '/support_disk_compatibility/d' /etc.defaults/synoinfo.conf
            cat >> /etc.defaults/synoinfo.conf << 'EOF'
# Synology Drive Unlocker - Aggressive Patch
support_disk_compatibility="no"
support_disk_compatibility_check="no"
support_disk_compatibility_override="yes"
EOF
        fi
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        echo "Creating systemd service..."
        cat > /etc/systemd/system/synology-unlocker.service << 'EOF'
[Unit]
Description=Synology Drive Unlocker Service
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/disable_disk_checks.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
        
        systemctl enable synology-unlocker.service 2>/dev/null || echo "systemd not available"
        
        # 6. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        echo "Modifying binary files..."
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
        for cmd in synocheck synocheck.sh synocheck.bin; do
            if [ -f "/usr/syno/bin/$cmd" ]; then
                cp "/usr/syno/bin/$cmd" "/usr/syno/bin/$cmd.backup"
                ln -sf /usr/syno/bin/synocheck "/usr/syno/bin/$cmd"
            fi
        done
        
        echo "Aggressive patch applied successfully"
        """
        
        stdin, stdout, stderr = ssh.exec_command(patch_script)
        output = stdout.read().decode()
        self.log(f"‚ö° –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–∞—Ç—á: {output}")
    
    def restart_services(self, ssh):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±"""
        restart_script = """
        #!/bin/bash
        echo "Restarting services..."
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–ª—É–∂–±—ã
        /usr/syno/bin/synopkg restart pkgctl-WebStation 2>/dev/null || echo "WebStation restart failed"
        /usr/syno/bin/synopkg restart pkgctl-Docker 2>/dev/null || echo "Docker restart failed"
        /usr/syno/bin/synopkg restart pkgctl-StorageManager 2>/dev/null || echo "StorageManager restart failed"
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
        /usr/syno/bin/synopkg restart pkgctl-VolumeManager 2>/dev/null || echo "VolumeManager restart failed"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ö—É–∫–∏
        /usr/local/bin/disable_disk_checks.sh 2>/dev/null || echo "Hooks applied"
        
        echo "Services restarted"
        """
        
        stdin, stdout, stderr = ssh.exec_command(restart_script)
        output = stdout.read().decode()
        self.log(f"üîÑ –°–ª—É–∂–±—ã: {output.strip()}")
    
    def restore_system(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        self.log("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        self.progress_bar.start()
        self.progress_var.set("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        def restore():
            try:
                ip = self.ip_var.get()
                login = self.login_var.get()
                password = self.password_var.get()
                
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ip, username=login, password=password, timeout=10)
                
                restore_script = """
                #!/bin/bash
                echo "Restoring system..."
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
                if [ -f /etc/synoinfo.conf.backup ]; then
                    cp /etc/synoinfo.conf.backup /etc/synoinfo.conf
                    echo "Restored synoinfo.conf"
                fi
                
                if [ -f /usr/syno/bin/synocheck.backup ]; then
                    cp /usr/syno/bin/synocheck.backup /usr/syno/bin/synocheck
                    chmod +x /usr/syno/bin/synocheck
                    echo "Restored synocheck"
                fi
                
                if [ -f /etc.defaults/synoinfo.conf.backup ]; then
                    cp /etc.defaults/synoinfo.conf.backup /etc.defaults/synoinfo.conf
                    echo "Restored synoinfo.conf.defaults"
                fi
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                rm -f /usr/local/bin/disable_disk_checks.sh
                rm -f /etc/systemd/system/synology-unlocker.service
                
                echo "System restored"
                """
                
                stdin, stdout, stderr = ssh.exec_command(restore_script)
                output = stdout.read().decode()
                self.log(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {output.strip()}")
                
                ssh.close()
                self.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                self.progress_var.set("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                self.progress_var.set("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=restore, daemon=True).start()

def main():
    root = tk.Tk()
    app = AggressivePatch(root)
    root.mainloop()

if __name__ == "__main__":
    main()
