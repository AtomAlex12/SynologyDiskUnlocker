#!/usr/bin/env python3
"""
Synology Drive Unlocker
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤ –≤ Synology NAS
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import subprocess
import os
import sys
import json
import threading
import time
from pathlib import Path
import paramiko
import socket

class SynologyUnlocker:
    def __init__(self, root):
        self.root = root
        self.root.title("Synology Drive Unlocker v1.0")
        self.root.geometry("900x700")
        self.root.resizable(True, True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config_file = "config.json"
        self.backup_dir = "backups"
        self.log_file = "unlocker.log"
        self.ssh_client = None
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path(self.backup_dir).mkdir(exist_ok=True)
        
        self.setup_ui()
        self.load_config()
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üîì Synology Drive Unlocker", 
                               font=("Arial", 18, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.LabelFrame(main_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding="10")
        info_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        info_text = """–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞ –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–æ–π—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Synology –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–æ–≤.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–æ–¥–µ–ª–∏: DS225+, DS224+, DS723+, DS923+ –∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–∏–∏ Plus.

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π —É—Ç–∏–ª–∏—Ç—ã –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏!
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º."""
        
        ttk.Label(info_frame, text=info_text, justify=tk.LEFT).grid(row=0, column=0)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        settings_frame = ttk.LabelFrame(main_frame, text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", padding="10")
        settings_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # IP –∞–¥—Ä–µ—Å
        ttk.Label(settings_frame, text="IP –∞–¥—Ä–µ—Å NAS:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.ip_var = tk.StringVar(value="192.168.1.100")
        ttk.Entry(settings_frame, textvariable=self.ip_var, width=20).grid(row=0, column=1, sticky=tk.W, padx=(5, 0))
        
        # –ü–æ—Ä—Ç SSH
        ttk.Label(settings_frame, text="SSH –ø–æ—Ä—Ç:").grid(row=0, column=2, sticky=tk.W, padx=(20, 0), pady=2)
        self.ssh_port_var = tk.StringVar(value="22")
        ttk.Entry(settings_frame, textvariable=self.ssh_port_var, width=10).grid(row=0, column=3, sticky=tk.W, padx=(5, 0))
        
        # –õ–æ–≥–∏–Ω
        ttk.Label(settings_frame, text="–õ–æ–≥–∏–Ω:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.login_var = tk.StringVar(value="admin")
        ttk.Entry(settings_frame, textvariable=self.login_var, width=20).grid(row=1, column=1, sticky=tk.W, padx=(5, 0))
        
        # –ü–∞—Ä–æ–ª—å
        ttk.Label(settings_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=1, column=2, sticky=tk.W, padx=(20, 0), pady=2)
        self.password_var = tk.StringVar()
        ttk.Entry(settings_frame, textvariable=self.password_var, show="*", width=20).grid(row=1, column=3, sticky=tk.W, padx=(5, 0))
        
        # –û–ø—Ü–∏–∏
        options_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –û–ø—Ü–∏–∏", padding="10")
        options_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.create_backup_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(options_frame, text="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏", 
                       variable=self.create_backup_var).grid(row=0, column=0, sticky=tk.W)
        
        self.auto_restart_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(options_frame, text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å NAS –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π", 
                       variable=self.auto_restart_var).grid(row=1, column=0, sticky=tk.W)
        
        self.force_unlock_var = tk.BooleanVar(value=False)
        ttk.Checkbutton(options_frame, text="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)", 
                       variable=self.force_unlock_var).grid(row=2, column=0, sticky=tk.W)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=4, column=0, columnspan=3, pady=(0, 10))
        
        ttk.Button(buttons_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", 
                  command=self.test_connection).grid(row=0, column=0, padx=(0, 5))
        
        ttk.Button(buttons_frame, text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–∫–∏", 
                  command=self.unlock_drives).grid(row=0, column=1, padx=5)
        
        ttk.Button(buttons_frame, text="üîí –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", 
                  command=self.restore_restrictions).grid(row=0, column=2, padx=5)
        
        ttk.Button(buttons_frame, text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏", 
                  command=self.show_logs).grid(row=0, column=3, padx=5)
        
        ttk.Button(buttons_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.show_settings).grid(row=0, column=4, padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        ttk.Label(main_frame, textvariable=self.progress_var).grid(row=5, column=0, columnspan=3, sticky=tk.W, pady=(0, 5))
        
        self.progress_bar = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress_bar.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –õ–æ–≥ –æ–∫–Ω–æ
        log_frame = ttk.LabelFrame(main_frame, text="üìù –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π", padding="5")
        log_frame.grid(row=7, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 0))
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=12, width=100)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(2, weight=1)
        main_frame.rowconfigure(7, weight=1)
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(log_message)
    
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NAS"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NAS...")
        self.progress_bar.start()
        self.progress_var.set("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        def test():
            try:
                ip = self.ip_var.get()
                port = int(self.ssh_port_var.get())
                login = self.login_var.get()
                password = self.password_var.get()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
                self.log(f"Ping {ip}...")
                result = subprocess.run(['ping', '-n', '1', ip], 
                                      capture_output=True, text=True, timeout=10)
                
                if result.returncode != 0:
                    self.log(f"‚ùå NAS {ip} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping")
                    self.progress_var.set("NAS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                
                self.log(f"‚úÖ NAS {ip} –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH
                self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                
                try:
                    ssh.connect(ip, port=port, username=login, password=password, timeout=10)
                    self.log("‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ DSM
                    stdin, stdout, stderr = ssh.exec_command("cat /etc.defaults/VERSION")
                    version = stdout.read().decode().strip()
                    self.log(f"üìã –í–µ—Ä—Å–∏—è DSM: {version}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
                    stdin, stdout, stderr = ssh.exec_command("cat /proc/sys/kernel/syno_hw_version")
                    model = stdout.read().decode().strip()
                    self.log(f"üñ•Ô∏è –ú–æ–¥–µ–ª—å: {model}")
                    
                    ssh.close()
                    self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NAS —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    self.progress_var.set("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                    
                except paramiko.AuthenticationException:
                    self.log("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SSH")
                    self.progress_var.set("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ SSH: {e}")
                    self.progress_var.set("–û—à–∏–±–∫–∞ SSH")
                    
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                self.progress_var.set("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=test, daemon=True).start()
    
    def unlock_drives(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–∏—Å–∫–æ–≤"""
        self.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–∏—Å–∫–æ–≤...")
        self.progress_bar.start()
        self.progress_var.set("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–∏—Å–∫–æ–≤...")
        
        def unlock():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                ip = self.ip_var.get()
                port = int(self.ssh_port_var.get())
                login = self.login_var.get()
                password = self.password_var.get()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.ssh_client = paramiko.SSHClient()
                self.ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                self.ssh_client.connect(ip, port=port, username=login, password=password)
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if self.create_backup_var.get():
                    self.log("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
                    self.create_backup()
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
                self.log("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
                self.apply_patch()
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—ã
                self.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±...")
                self.restart_services()
                
                self.log("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                self.progress_var.set("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                if self.auto_restart_var.get():
                    self.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ NAS...")
                    self.restart_nas()
                
                self.ssh_client.close()
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
                self.progress_var.set("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                if self.ssh_client:
                    self.ssh_client.close()
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=unlock, daemon=True).start()
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        backup_script = """
        #!/bin/bash
        BACKUP_DIR="/tmp/synology_backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p $BACKUP_DIR
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        cp /etc/synoinfo.conf $BACKUP_DIR/ 2>/dev/null || echo "synoinfo.conf not found"
        cp /usr/syno/bin/synocheck $BACKUP_DIR/ 2>/dev/null || echo "synocheck not found"
        cp /etc.defaults/synoinfo.conf $BACKUP_DIR/ 2>/dev/null || echo "default synoinfo.conf not found"
        
        echo "Backup created in $BACKUP_DIR"
        ls -la $BACKUP_DIR
        """
        
        stdin, stdout, stderr = self.ssh_client.exec_command(backup_script)
        output = stdout.read().decode()
        self.log(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {output}")
    
    def apply_patch(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–∞"""
        patch_script = """
        #!/bin/bash
        
        echo "Applying disk compatibility patch..."
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–æ–≤ –≤ synoinfo.conf
        if [ -f /etc/synoinfo.conf ]; then
            cp /etc/synoinfo.conf /etc/synoinfo.conf.backup
            sed -i 's/support_disk_compatibility="yes"/support_disk_compatibility="no"/g' /etc/synoinfo.conf
            sed -i 's/support_disk_compatibility_check="yes"/support_disk_compatibility_check="no"/g' /etc/synoinfo.conf
            echo "Modified /etc/synoinfo.conf"
        fi
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º synocheck –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–∏—Å–∫–æ–≤
        if [ -f /usr/syno/bin/synocheck ]; then
            cp /usr/syno/bin/synocheck /usr/syno/bin/synocheck.backup
            sed -i 's/check_disk_compatibility/return 0 # check_disk_compatibility/g' /usr/syno/bin/synocheck
            chmod +x /usr/syno/bin/synocheck
            echo "Modified /usr/syno/bin/synocheck"
        fi
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if [ -f /etc/synoinfo.conf ]; then
            echo "support_disk_compatibility=\"no\"" >> /etc/synoinfo.conf
            echo "support_disk_compatibility_check=\"no\"" >> /etc/synoinfo.conf
            echo "support_disk_compatibility_override=\"yes\"" >> /etc/synoinfo.conf
        fi
        
        echo "Patch applied successfully"
        """
        
        stdin, stdout, stderr = self.ssh_client.exec_command(patch_script)
        output = stdout.read().decode()
        self.log(f"üîß –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω: {output}")
    
    def restart_services(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±"""
        restart_script = """
        #!/bin/bash
        echo "Restarting services..."
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª—É–∂–±—ã
        /usr/syno/bin/synopkg restart pkgctl-WebStation 2>/dev/null || echo "WebStation restart failed"
        /usr/syno/bin/synopkg restart pkgctl-Docker 2>/dev/null || echo "Docker restart failed"
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
        /usr/syno/bin/synopkg restart pkgctl-StorageManager 2>/dev/null || echo "StorageManager restart failed"
        
        echo "Services restarted"
        """
        
        stdin, stdout, stderr = self.ssh_client.exec_command(restart_script)
        output = stdout.read().decode()
        self.log(f"üîÑ –°–ª—É–∂–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã: {output}")
    
    def restart_nas(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ NAS"""
        self.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ NAS —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        stdin, stdout, stderr = self.ssh_client.exec_command("sudo reboot")
        self.log("üîÑ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    
    def restore_restrictions(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        self.log("üîí –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
        self.progress_bar.start()
        self.progress_var.set("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...")
        
        def restore():
            try:
                ip = self.ip_var.get()
                port = int(self.ssh_port_var.get())
                login = self.login_var.get()
                password = self.password_var.get()
                
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ip, port=port, username=login, password=password)
                
                restore_script = """
                #!/bin/bash
                echo "Restoring original restrictions..."
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º synoinfo.conf
                if [ -f /etc/synoinfo.conf.backup ]; then
                    cp /etc/synoinfo.conf.backup /etc/synoinfo.conf
                    echo "Restored synoinfo.conf from backup"
                fi
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º synocheck
                if [ -f /usr/syno/bin/synocheck.backup ]; then
                    cp /usr/syno/bin/synocheck.backup /usr/syno/bin/synocheck
                    chmod +x /usr/syno/bin/synocheck
                    echo "Restored synocheck from backup"
                fi
                
                echo "Restrictions restored"
                """
                
                stdin, stdout, stderr = ssh.exec_command(restore_script)
                output = stdout.read().decode()
                self.log(f"üîí –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {output}")
                
                ssh.close()
                self.log("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                self.progress_var.set("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                self.progress_var.set("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=restore, daemon=True).start()
    
    def show_logs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Å –ª–æ–≥–∞–º–∏"""
        log_window = tk.Toplevel(self.root)
        log_window.title("üìã –õ–æ–≥–∏ Synology Unlocker")
        log_window.geometry("800x600")
        
        log_text = scrolledtext.ScrolledText(log_window, wrap=tk.WORD)
        log_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        try:
            with open(self.log_file, "r", encoding="utf-8") as f:
                log_text.insert(tk.END, f.read())
        except FileNotFoundError:
            log_text.insert(tk.END, "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_window.geometry("400x300")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ttk.Label(settings_window, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", font=("Arial", 12, "bold")).pack(pady=10)
        
        # –¢–∞–π–º–∞—É—Ç SSH
        ttk.Label(settings_window, text="SSH —Ç–∞–π–º–∞—É—Ç (—Å–µ–∫—É–Ω–¥—ã):").pack(anchor=tk.W, padx=10)
        timeout_var = tk.StringVar(value="30")
        ttk.Entry(settings_window, textvariable=timeout_var, width=20).pack(anchor=tk.W, padx=10)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤
        auto_save_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(settings_window, text="–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤", 
                       variable=auto_save_var).pack(anchor=tk.W, padx=10)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(settings_window)
        button_frame.pack(pady=20)
        
        ttk.Button(button_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=lambda: self.save_settings(timeout_var.get(), auto_save_var.get())).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="–û—Ç–º–µ–Ω–∞", 
                  command=settings_window.destroy).pack(side=tk.LEFT, padx=5)
    
    def save_settings(self, timeout, auto_save):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.log(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: timeout={timeout}, auto_save={auto_save}")
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, "r", encoding="utf-8") as f:
                    config = json.load(f)
                    self.ip_var.set(config.get("ip", "192.168.1.100"))
                    self.ssh_port_var.set(config.get("ssh_port", "22"))
                    self.login_var.set(config.get("login", "admin"))
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = {
            "ip": self.ip_var.get(),
            "ssh_port": self.ssh_port_var.get(),
            "login": self.login_var.get()
        }
        
        try:
            with open(self.config_file, "w", encoding="utf-8") as f:
                json.dump(config, f, indent=2)
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def main():
    root = tk.Tk()
    app = SynologyUnlocker(root)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    def on_closing():
        app.save_config()
        root.destroy()
    
    root.protocol("WM_DELETE_WINDOW", on_closing)
    root.mainloop()

if __name__ == "__main__":
    main()
