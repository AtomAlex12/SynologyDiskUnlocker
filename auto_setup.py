#!/usr/bin/env python3
"""
Synology Drive Unlocker - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç NAS –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ç—á–∏ –±–µ–∑ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import subprocess
import os
import sys
import json
import threading
import time
import requests
import socket
from pathlib import Path
import webbrowser

class AutoSetup:
    def __init__(self, root):
        self.root = root
        self.root.title("Synology Drive Unlocker - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        self.root.geometry("900x700")
        self.root.resizable(True, True)
        
        self.setup_ui()
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Synology NAS", 
                               font=("Arial", 18, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_frame = ttk.LabelFrame(main_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding="10")
        info_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        info_text = """–≠—Ç–∞ —É—Ç–∏–ª–∏—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚Ä¢ –ù–∞–π–¥–µ—Ç –≤–∞—à Synology NAS –≤ —Å–µ—Ç–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç SSH –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚Ä¢ –ü—Ä–∏–º–µ–Ω–∏—Ç –ø–∞—Ç—á–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–∏—Å–∫–æ–≤
‚Ä¢ –í—Å–µ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ!

‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É DSM —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        
        ttk.Label(info_frame, text=info_text, justify=tk.LEFT).grid(row=0, column=0)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        settings_frame = ttk.LabelFrame(main_frame, text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        settings_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # IP –∞–¥—Ä–µ—Å –∏–ª–∏ –ø–æ–∏—Å–∫
        ttk.Label(settings_frame, text="IP –∞–¥—Ä–µ—Å NAS (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞):").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.ip_var = tk.StringVar()
        ttk.Entry(settings_frame, textvariable=self.ip_var, width=20).grid(row=0, column=1, sticky=tk.W, padx=(5, 0))
        
        ttk.Button(settings_frame, text="üîç –ù–∞–π—Ç–∏ NAS", 
                  command=self.find_nas).grid(row=0, column=2, padx=(10, 0))
        
        # –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
        ttk.Label(settings_frame, text="–õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.login_var = tk.StringVar(value="admin")
        ttk.Entry(settings_frame, textvariable=self.login_var, width=20).grid(row=1, column=1, sticky=tk.W, padx=(5, 0))
        
        ttk.Label(settings_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.password_var = tk.StringVar()
        ttk.Entry(settings_frame, textvariable=self.password_var, show="*", width=20).grid(row=2, column=1, sticky=tk.W, padx=(5, 0))
        
        # –ü–æ—Ä—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        ttk.Label(settings_frame, text="–ü–æ—Ä—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:").grid(row=3, column=0, sticky=tk.W, pady=2)
        self.web_port_var = tk.StringVar(value="5000")
        ttk.Entry(settings_frame, textvariable=self.web_port_var, width=10).grid(row=3, column=1, sticky=tk.W, padx=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=3, column=0, columnspan=3, pady=(0, 10))
        
        ttk.Button(buttons_frame, text="üîç –ù–∞–π—Ç–∏ NAS –≤ —Å–µ—Ç–∏", 
                  command=self.find_nas).grid(row=0, column=0, padx=(0, 5))
        
        ttk.Button(buttons_frame, text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", 
                  command=self.open_web_interface).grid(row=0, column=1, padx=5)
        
        ttk.Button(buttons_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSH", 
                  command=self.setup_ssh).grid(row=0, column=2, padx=5)
        
        ttk.Button(buttons_frame, text="üöÄ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", 
                  command=self.full_automation).grid(row=0, column=3, padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        ttk.Label(main_frame, textvariable=self.progress_var).grid(row=4, column=0, columnspan=3, sticky=tk.W, pady=(0, 5))
        
        self.progress_bar = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress_bar.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(main_frame, text="üìù –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π", padding="5")
        log_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 0))
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, width=100)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(2, weight=1)
        main_frame.rowconfigure(6, weight=1)
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    def find_nas(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ Synology NAS –≤ —Å–µ—Ç–∏"""
        self.log("üîç –ü–æ–∏—Å–∫ Synology NAS –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...")
        self.progress_bar.start()
        self.progress_var.set("–ü–æ–∏—Å–∫ NAS...")
        
        def search():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π IP
                import socket
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                s.connect(("8.8.8.8", 80))
                local_ip = s.getsockname()[0]
                s.close()
                
                self.log(f"–õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞
                base_ip = ".".join(local_ip.split(".")[:-1])
                self.log(f"–ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {base_ip}.1-254")
                
                found_nas = []
                
                # –ü–æ–∏—Å–∫ –ø–æ –ø–æ—Ä—Ç–∞–º Synology
                ports = [5000, 5001, 80, 443]
                
                for i in range(1, 255):
                    ip = f"{base_ip}.{i}"
                    self.log(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {ip}...")
                    
                    for port in ports:
                        try:
                            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                            sock.settimeout(1)
                            result = sock.connect_ex((ip, port))
                            sock.close()
                            
                            if result == 0:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Synology
                                try:
                                    response = requests.get(f"http://{ip}:{port}/webapi/query.cgi?api=SYNO.API.Info&version=1&method=query", 
                                                          timeout=2)
                                    if "SYNO.API.Info" in response.text:
                                        found_nas.append((ip, port))
                                        self.log(f"‚úÖ –ù–∞–π–¥–µ–Ω Synology NAS: {ip}:{port}")
                                        break
                                except:
                                    pass
                        except:
                            pass
                    
                    if len(found_nas) >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
                        break
                
                if found_nas:
                    self.log(f"üéâ –ù–∞–π–¥–µ–Ω–æ {len(found_nas)} Synology NAS:")
                    for ip, port in found_nas:
                        self.log(f"  ‚Ä¢ {ip}:{port}")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π
                    ip, port = found_nas[0]
                    self.ip_var.set(ip)
                    self.web_port_var.set(str(port))
                    self.log(f"‚úÖ –í—ã–±—Ä–∞–Ω: {ip}:{port}")
                else:
                    self.log("‚ùå Synology NAS –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏")
                    self.log("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                    self.log("  ‚Ä¢ NAS –≤–∫–ª—é—á–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ç–∏")
                    self.log("  ‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä –∏ NAS –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏")
                    self.log("  ‚Ä¢ –ë—Ä–∞–Ω–¥–º–∞—É—ç—Ä –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            finally:
                self.progress_bar.stop()
                self.progress_var.set("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        threading.Thread(target=search, daemon=True).start()
    
    def open_web_interface(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ DSM"""
        ip = self.ip_var.get()
        port = self.web_port_var.get()
        
        if not ip:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å NAS")
            return
        
        url = f"http://{ip}:{port}"
        self.log(f"üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {url}")
        
        try:
            webbrowser.open(url)
            self.log("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def setup_ssh(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SSH —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        self.log("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
        self.progress_bar.start()
        self.progress_var.set("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH...")
        
        def setup():
            try:
                ip = self.ip_var.get()
                port = self.web_port_var.get()
                login = self.login_var.get()
                password = self.password_var.get()
                
                if not all([ip, login, password]):
                    self.log("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    return
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
                session = requests.Session()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API
                self.log("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API...")
                api_info_url = f"http://{ip}:{port}/webapi/query.cgi"
                params = {
                    'api': 'SYNO.API.Info',
                    'version': '1',
                    'method': 'query'
                }
                
                response = session.get(api_info_url, params=params, timeout=10)
                if response.status_code != 200:
                    self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ NAS")
                    return
                
                # –õ–æ–≥–∏–Ω–∏–º—Å—è
                self.log("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...")
                login_url = f"http://{ip}:{port}/webapi/auth.cgi"
                login_params = {
                    'api': 'SYNO.API.Auth',
                    'version': '2',
                    'method': 'login',
                    'account': login,
                    'passwd': password,
                    'session': 'FileStation',
                    'format': 'sid'
                }
                
                response = session.get(login_url, params=login_params, timeout=10)
                if response.status_code != 200:
                    self.log("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É")
                    return
                
                data = response.json()
                if not data.get('success'):
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {data.get('error', {}).get('code')}")
                    return
                
                sid = data['data']['sid']
                self.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
                
                # –í–∫–ª—é—á–∞–µ–º SSH
                self.log("–í–∫–ª—é—á–µ–Ω–∏–µ SSH...")
                ssh_url = f"http://{ip}:{port}/webapi/entry.cgi"
                ssh_params = {
                    'api': 'SYNO.Core.Terminal',
                    'version': '1',
                    'method': 'set',
                    'enable': 'true',
                    'port': '22',
                    '_sid': sid
                }
                
                response = session.get(ssh_url, params=ssh_params, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        self.log("‚úÖ SSH —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω")
                    else:
                        self.log(f"‚ö†Ô∏è SSH —É–∂–µ –≤–∫–ª—é—á–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞: {data.get('error', {}).get('code')}")
                else:
                    self.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å SSH —á–µ—Ä–µ–∑ API, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é")
                
                # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                logout_url = f"http://{ip}:{port}/webapi/auth.cgi"
                logout_params = {
                    'api': 'SYNO.API.Auth',
                    'version': '2',
                    'method': 'logout',
                    'session': 'FileStation',
                    '_sid': sid
                }
                session.get(logout_url, params=logout_params, timeout=5)
                
                self.log("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                self.log("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —É—Ç–∏–ª–∏—Ç—É")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH: {e}")
            finally:
                self.progress_bar.stop()
                self.progress_var.set("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        threading.Thread(target=setup, daemon=True).start()
    
    def full_automation(self):
        """–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è: –ø–æ–∏—Å–∫ + –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ + –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...")
        self.progress_bar.start()
        self.progress_var.set("–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è...")
        
        def automate():
            try:
                # –®–∞–≥ 1: –ü–æ–∏—Å–∫ NAS
                self.log("–®–∞–≥ 1: –ü–æ–∏—Å–∫ NAS...")
                self.find_nas()
                time.sleep(2)
                
                # –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH
                self.log("–®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH...")
                self.setup_ssh()
                time.sleep(3)
                
                # –®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π
                self.log("–®–∞–≥ 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π...")
                self.apply_patches()
                
                self.log("‚úÖ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {e}")
            finally:
                self.progress_bar.stop()
                self.progress_var.set("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        threading.Thread(target=automate, daemon=True).start()
    
    def apply_patches(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        self.log("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–µ–π
        # —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
        self.log("‚ö†Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ç—á–µ–π —Ç—Ä–µ–±—É–µ—Ç SSH –¥–æ—Å—Ç—É–ø–∞")
        self.log("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —É—Ç–∏–ª–∏—Ç—É –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSH")

def main():
    root = tk.Tk()
    app = AutoSetup(root)
    root.mainloop()

if __name__ == "__main__":
    main()
