#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Synology Drive Unlocker - –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è exe
–û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –º–µ—Ç–æ–¥–µ: https://github.com/007revad/Synology_HDD_db

MIT License
Copyright (c) 2025 AtomAlex12
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import paramiko
import threading
import time
import json
import os
import subprocess
import logging
import sys

class SynologyUnlockerFinal:
    def __init__(self, root):
        self.root = root
        self.root.title("Synology Drive Unlocker v1.0")
        self.root.geometry("900x700")
        self.root.configure(bg='#2b2b2b')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.ip_var = tk.StringVar()
        self.login_var = tk.StringVar()
        self.password_var = tk.StringVar()
        self.use_sudo_var = tk.BooleanVar(value=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_ui()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_config()
        
        # SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.ssh = None
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(os.path.join(log_dir, 'unlocker_final.log'), encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#2b2b2b')
        title_frame.pack(fill='x', padx=20, pady=10)
        
        title_label = tk.Label(
            title_frame,
            text="üîì Synology Drive Unlocker v1.0",
            font=('Arial', 18, 'bold'),
            fg='#00ff00',
            bg='#2b2b2b'
        )
        title_label.pack()
        
        subtitle_label = tk.Label(
            title_frame,
            text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–∏—Å–∫–æ–≤ –Ω–∞ Synology NAS",
            font=('Arial', 10),
            fg='#cccccc',
            bg='#2b2b2b'
        )
        subtitle_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, bg='#2b2b2b')
        main_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        settings_frame = tk.LabelFrame(
            main_frame,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            font=('Arial', 12, 'bold'),
            fg='#ffffff',
            bg='#3b3b3b',
            relief='raised',
            bd=2
        )
        settings_frame.pack(fill='x', pady=(0, 10))
        
        # IP –∞–¥—Ä–µ—Å
        tk.Label(settings_frame, text="IP –∞–¥—Ä–µ—Å NAS:", fg='#ffffff', bg='#3b3b3b').grid(row=0, column=0, sticky='w', padx=10, pady=5)
        tk.Entry(settings_frame, textvariable=self.ip_var, width=25, bg='#4b4b4b', fg='#ffffff').grid(row=0, column=1, padx=10, pady=5)
        
        # –õ–æ–≥–∏–Ω
        tk.Label(settings_frame, text="–õ–æ–≥–∏–Ω:", fg='#ffffff', bg='#3b3b3b').grid(row=1, column=0, sticky='w', padx=10, pady=5)
        tk.Entry(settings_frame, textvariable=self.login_var, width=25, bg='#4b4b4b', fg='#ffffff').grid(row=1, column=1, padx=10, pady=5)
        
        # –ü–∞—Ä–æ–ª—å
        tk.Label(settings_frame, text="–ü–∞—Ä–æ–ª—å:", fg='#ffffff', bg='#3b3b3b').grid(row=2, column=0, sticky='w', padx=10, pady=5)
        tk.Entry(settings_frame, textvariable=self.password_var, show='*', width=25, bg='#4b4b4b', fg='#ffffff').grid(row=2, column=1, padx=10, pady=5)
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sudo
        tk.Checkbutton(
            settings_frame,
            text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å sudo (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
            variable=self.use_sudo_var,
            fg='#ffffff',
            bg='#3b3b3b',
            selectcolor='#2b2b2b'
        ).grid(row=3, column=0, columnspan=2, sticky='w', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = tk.Frame(main_frame, bg='#2b2b2b')
        buttons_frame.pack(fill='x', pady=10)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        tk.Button(
            buttons_frame,
            text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
            command=self.test_connection,
            bg='#4b4b4b',
            fg='#ffffff',
            font=('Arial', 10, 'bold'),
            relief='raised',
            bd=2,
            width=20
        ).pack(side='left', padx=5)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—á
        tk.Button(
            buttons_frame,
            text="üîß –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—á",
            command=self.apply_standard_patch,
            bg='#0066cc',
            fg='#ffffff',
            font=('Arial', 10, 'bold'),
            relief='raised',
            bd=2,
            width=20
        ).pack(side='left', padx=5)
        
        # Toshiba HDWT860
        tk.Button(
            buttons_frame,
            text="üíæ Toshiba HDWT860",
            command=self.apply_toshiba_fix,
            bg='#cc6600',
            fg='#ffffff',
            font=('Arial', 10, 'bold'),
            relief='raised',
            bd=2,
            width=20
        ).pack(side='left', padx=5)
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        tk.Button(
            buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            command=self.save_config,
            bg='#4b4b4b',
            fg='#ffffff',
            font=('Arial', 10, 'bold'),
            relief='raised',
            bd=2,
            width=15
        ).pack(side='right', padx=5)
        
        # –õ–æ–≥
        log_frame = tk.LabelFrame(
            main_frame,
            text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π",
            font=('Arial', 12, 'bold'),
            fg='#ffffff',
            bg='#3b3b3b',
            relief='raised',
            bd=2
        )
        log_frame.pack(fill='both', expand=True, pady=(10, 0))
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            height=18,
            bg='#1e1e1e',
            fg='#00ff00',
            font=('Consolas', 9),
            wrap=tk.WORD
        )
        self.log_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_label = tk.Label(
            self.root,
            textvariable=self.status_var,
            fg='#00ff00',
            bg='#2b2b2b',
            font=('Arial', 10, 'bold')
        )
        status_label.pack(side='bottom', pady=5)
    
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        
        self.log_text.insert(tk.END, f"{log_message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
        self.logger.info(message)
    
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        def test():
            try:
                self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NAS...")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
                ip = self.ip_var.get()
                if not ip:
                    self.log("‚ùå –í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å")
                    return
                
                self.log(f"üì° Ping {ip}...")
                result = subprocess.run(['ping', '-n', '1', ip], capture_output=True, text=True)
                if result.returncode != 0:
                    self.log("‚ùå NAS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
                
                self.log("‚úÖ NAS –¥–æ—Å—Ç—É–ø–µ–Ω")
                
                # SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.log("üîê SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                ssh = self.connect_ssh()
                if not ssh:
                    self.log("‚ùå SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ sudo
                if self.use_sudo_var.get():
                    self.log("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ sudo –¥–æ—Å—Ç—É–ø–∞...")
                    output, error, code = self.execute_ssh_command(ssh, "whoami", use_sudo=True)
                    if code == 0 and "root" in output:
                        self.log("‚úÖ Sudo –¥–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –æ—Ç root")
                    else:
                        self.log("‚ö†Ô∏è Sudo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
                
                ssh.close()
                self.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        threading.Thread(target=test, daemon=True).start()
    
    def connect_ssh(self):
        """SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            ssh.connect(
                hostname=self.ip_var.get(),
                username=self.login_var.get(),
                password=self.password_var.get(),
                timeout=10
            )
            
            return ssh
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ SSH: {e}")
            return None
    
    def execute_ssh_command(self, ssh, command, use_sudo=False):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SSH –∫–æ–º–∞–Ω–¥—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if use_sudo and self.use_sudo_var.get():
                # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ root —á–µ—Ä–µ–∑ sudo su
                self.log(f"üîê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ root —á–µ—Ä–µ–∑ sudo su...")
                self.log(f"üíª >>> sudo su")
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                transport = ssh.get_transport()
                channel = transport.open_session()
                channel.get_pty()
                channel.invoke_shell()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º sudo su
                channel.send("sudo su\n")
                time.sleep(1)
                
                # –ñ–¥–µ–º –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
                response = ""
                timeout = 0
                while timeout < 50:
                    if channel.recv_ready():
                        data = channel.recv(1024).decode('utf-8', errors='ignore')
                        response += data
                        if "password" in data.lower() or "Password" in data:
                            break
                    time.sleep(0.1)
                    timeout += 1
                
                # –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å
                self.log(f"üîë –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è sudo...")
                self.log(f"üíª >>> [–ø–∞—Ä–æ–ª—å —Å–∫—Ä—ã—Ç]")
                channel.send(f"{self.password_var.get()}\n")
                time.sleep(2)
                
                # –ñ–¥–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è root
                response = ""
                timeout = 0
                while timeout < 100:
                    if channel.recv_ready():
                        data = channel.recv(1024).decode('utf-8', errors='ignore')
                        response += data
                        if "#" in data and "root" in data:
                            break
                    time.sleep(0.1)
                    timeout += 1
                
                self.log(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ root")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                self.log(f"üíª >>> {command}")
                channel.send(f"{command}\n")
                time.sleep(2)
                
                # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                output = ""
                timeout = 0
                while timeout < 200:
                    if channel.recv_ready():
                        data = channel.recv(1024).decode('utf-8', errors='ignore')
                        output += data
                        timeout = 0
                    else:
                        timeout += 1
                    time.sleep(0.1)
                
                # –í—ã—Ö–æ–¥–∏–º –∏–∑ root
                channel.send("exit\n")
                time.sleep(1)
                channel.close()
                
                if output.strip():
                    self.log(f"üíª <<< {output.strip()}")
                
                return output, "", 0
                
            else:
                # –û–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                self.log(f"üíª >>> {command}")
                
                stdin, stdout, stderr = ssh.exec_command(command)
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                while not stdout.channel.exit_status_ready():
                    time.sleep(0.1)
                
                exit_status = stdout.channel.recv_exit_status()
                output = stdout.read().decode('utf-8', errors='ignore')
                error = stderr.read().decode('utf-8', errors='ignore')
                
                if output.strip():
                    self.log(f"üíª <<< {output.strip()}")
                if error.strip():
                    self.log(f"üíª <<< ERROR: {error.strip()}")
                
                return output, error, exit_status
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return "", str(e), -1
    
    def apply_standard_patch(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ç—á–∞"""
        def patch():
            try:
                self.log("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ç—á–∞...")
                
                ssh = self.connect_ssh()
                if not ssh:
                    self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                    return
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                self.log("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
                backup_script = """
                BACKUP_DIR="/tmp/synology_backup_$(date +%Y%m%d_%H%M%S)"
                mkdir -p $BACKUP_DIR
                cp /etc.defaults/synoinfo.conf $BACKUP_DIR/ 2>/dev/null || echo "synoinfo.conf not found"
                echo "Backup created in $BACKUP_DIR"
                """
                output, error, code = self.execute_ssh_command(ssh, backup_script, use_sudo=True)
                self.log(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {output.strip()}")
                
                # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è synoinfo.conf
                self.log("üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è /etc.defaults/synoinfo.conf...")
                
                commands = [
                    "sudo -i",
                    "sed -i 's/support_disk_compatibility=\"yes\"/support_disk_compatibility=\"no\"/g' /etc.defaults/synoinfo.conf",
                    "echo 'support_disk_compatibility=\"no\"' >> /etc.defaults/synoinfo.conf",
                    "echo 'support_disk_compatibility_override=\"yes\"' >> /etc.defaults/synoinfo.conf",
                    "echo 'Disk compatibility check disabled'",
                    "exit"
                ]
                
                for cmd in commands:
                    self.log(f"üíª >>> {cmd}")
                    output, error, code = self.execute_ssh_command(ssh, cmd, use_sudo=True)
                    if output.strip():
                        self.log(f"üíª <<< {output.strip()}")
                
                ssh.close()
                self.log("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.log("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å NAS –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        threading.Thread(target=patch, daemon=True).start()
    
    def apply_toshiba_fix(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∞ –¥–ª—è Toshiba HDWT860"""
        def fix():
            try:
                self.log("üíæ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∞ –¥–ª—è Toshiba HDWT860...")
                
                ssh = self.connect_ssh()
                if not ssh:
                    self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
                    return
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                self.log("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
                backup_script = """
                BACKUP_DIR="/tmp/toshiba_fix_backup_$(date +%Y%m%d_%H%M%S)"
                mkdir -p $BACKUP_DIR
                cp /etc.defaults/synoinfo.conf $BACKUP_DIR/ 2>/dev/null || echo "synoinfo.conf not found"
                echo "Backup created in $BACKUP_DIR"
                """
                output, error, code = self.execute_ssh_command(ssh, backup_script, use_sudo=True)
                self.log(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {output.strip()}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è Toshiba
                self.log("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞ –¥–ª—è Toshiba HDWT860...")
                
                commands = [
                    "sudo -i",
                    "sed -i 's/support_disk_compatibility=\"yes\"/support_disk_compatibility=\"no\"/g' /etc.defaults/synoinfo.conf",
                    "echo 'support_disk_compatibility=\"no\"' >> /etc.defaults/synoinfo.conf",
                    "echo 'support_disk_compatibility_override=\"yes\"' >> /etc.defaults/synoinfo.conf",
                    "echo 'support_disk_compatibility_force=\"yes\"' >> /etc.defaults/synoinfo.conf",
                    "echo 'support_toshiba_hdwt860=\"yes\"' >> /etc.defaults/synoinfo.conf",
                    "echo 'support_disk_force_recognition=\"yes\"' >> /etc.defaults/synoinfo.conf",
                    "echo 'Toshiba HDWT860 special fix applied'",
                    "exit"
                ]
                
                for cmd in commands:
                    self.log(f"üíª >>> {cmd}")
                    output, error, code = self.execute_ssh_command(ssh, cmd, use_sudo=True)
                    if output.strip():
                        self.log(f"üíª <<< {output.strip()}")
                
                ssh.close()
                self.log("‚úÖ –§–∏–∫—Å –¥–ª—è Toshiba HDWT860 –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.log("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å NAS –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        threading.Thread(target=fix, daemon=True).start()
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config = {
                'ip': self.ip_var.get(),
                'login': self.login_var.get(),
                'password': self.password_var.get(),
                'use_sudo': self.use_sudo_var.get()
            }
            
            with open('config_final.json', 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            
            self.log("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if os.path.exists('config_final.json'):
                with open('config_final.json', 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                self.ip_var.set(config.get('ip', ''))
                self.login_var.set(config.get('login', 'admin'))
                self.password_var.set(config.get('password', ''))
                self.use_sudo_var.set(config.get('use_sudo', True))
                
                self.log("üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

def main():
    root = tk.Tk()
    app = SynologyUnlockerFinal(root)
    root.mainloop()

if __name__ == "__main__":
    main()
