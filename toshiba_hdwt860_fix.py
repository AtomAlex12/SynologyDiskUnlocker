#!/usr/bin/env python3
"""
Synology Drive Unlocker - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è Toshiba HDWT860
–¶–µ–ª–µ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–∏—Å–∫–∞
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import subprocess
import os
import sys
import json
import threading
import time
import requests
import socket
from pathlib import Path
import paramiko

class ToshibaHDWT860Fix:
    def __init__(self, root):
        self.root = root
        self.root.title("Synology Drive Unlocker - Toshiba HDWT860 Fix")
        self.root.geometry("700x500")
        self.root.resizable(True, True)
        
        self.setup_ui()
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞"""
        
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üíæ Toshiba HDWT860 Special Fix", 
                               font=("Arial", 18, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
        info_frame = ttk.LabelFrame(main_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ", padding="10")
        info_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        info_text = """Toshiba HDWT860 - 5.5TB HDD
–ü—Ä–æ–±–ª–µ–º–∞: –î–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ" (Unrecognized)
–†–µ—à–µ–Ω–∏–µ: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ç—á –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        
        ttk.Label(info_frame, text=info_text, justify=tk.LEFT).grid(row=0, column=0)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        settings_frame = ttk.LabelFrame(main_frame, text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", padding="10")
        settings_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # IP –∞–¥—Ä–µ—Å
        ttk.Label(settings_frame, text="IP –∞–¥—Ä–µ—Å NAS:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.ip_var = tk.StringVar(value="192.168.1.100")
        ttk.Entry(settings_frame, textvariable=self.ip_var, width=20).grid(row=0, column=1, sticky=tk.W, padx=(5, 0))
        
        # –õ–æ–≥–∏–Ω
        ttk.Label(settings_frame, text="–õ–æ–≥–∏–Ω:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.login_var = tk.StringVar(value="admin")
        ttk.Entry(settings_frame, textvariable=self.login_var, width=20).grid(row=1, column=1, sticky=tk.W, padx=(5, 0))
        
        # –ü–∞—Ä–æ–ª—å
        ttk.Label(settings_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=2, column=0, sticky=tk.W, pady=2)
        self.password_var = tk.StringVar()
        ttk.Entry(settings_frame, textvariable=self.password_var, show="*", width=20).grid(row=2, column=1, sticky=tk.W, padx=(5, 0))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=3, column=0, columnspan=3, pady=(0, 10))
        
        ttk.Button(buttons_frame, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", 
                  command=self.test_connection).grid(row=0, column=0, padx=(0, 5))
        
        ttk.Button(buttons_frame, text="üíæ –ò–°–ü–†–ê–í–ò–¢–¨ TOSHIBA HDWT860", 
                  command=self.fix_toshiba_disk, style="Accent.TButton").grid(row=0, column=1, padx=5)
        
        ttk.Button(buttons_frame, text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                  command=self.restore_system).grid(row=0, column=2, padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        ttk.Label(main_frame, textvariable=self.progress_var).grid(row=4, column=0, columnspan=3, sticky=tk.W, pady=(0, 5))
        
        self.progress_bar = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress_bar.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        # –õ–æ–≥
        log_frame = ttk.LabelFrame(main_frame, text="üìù –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π", padding="5")
        log_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 0))
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=12, width=80)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(2, weight=1)
        main_frame.rowconfigure(6, weight=1)
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NAS"""
        self.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NAS...")
        self.progress_bar.start()
        self.progress_var.set("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        def test():
            try:
                ip = self.ip_var.get()
                login = self.login_var.get()
                password = self.password_var.get()
                
                if not all([ip, login, password]):
                    self.log("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
                result = subprocess.run(['ping', '-n', '1', ip], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode != 0:
                    self.log("‚ùå NAS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ip, username=login, password=password, timeout=10)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ DSM
                stdin, stdout, stderr = ssh.exec_command("cat /etc.defaults/VERSION")
                version = stdout.read().decode().strip()
                self.log(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. DSM –≤–µ—Ä—Å–∏—è: {version}")
                
                ssh.close()
                self.progress_var.set("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                self.progress_var.set("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=test, daemon=True).start()
    
    def fix_toshiba_disk(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è Toshiba HDWT860"""
        self.log("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è Toshiba HDWT860...")
        self.progress_bar.start()
        self.progress_var.set("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Toshiba HDWT860...")
        
        def fix():
            try:
                ip = self.ip_var.get()
                login = self.login_var.get()
                password = self.password_var.get()
                
                if not all([ip, login, password]):
                    self.log("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                    return
                
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ip, username=login, password=password, timeout=10)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                self.log("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
                self.create_backup(ssh)
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞
                self.log("üíæ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞ –¥–ª—è Toshiba HDWT860...")
                self.apply_toshiba_fix(ssh)
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±
                self.log("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±...")
                self.restart_services(ssh)
                
                ssh.close()
                
                self.log("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                self.log("üéâ Toshiba HDWT860 —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å!")
                self.progress_var.set("–§–∏–∫—Å –ø—Ä–∏–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                messagebox.showinfo("–£—Å–ø–µ—Ö!", 
                    "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å –¥–ª—è Toshiba HDWT860 –ø—Ä–∏–º–µ–Ω–µ–Ω!\n\n"
                    "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ NAS –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∏—Å–∫.\n"
                    "–î–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π.")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞: {e}")
                self.progress_var.set("–û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=fix, daemon=True).start()
    
    def create_backup(self, ssh):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        backup_script = """
        #!/bin/bash
        BACKUP_DIR="/tmp/toshiba_fix_backup_$(date +%Y%m%d_%H%M%S)"
        mkdir -p $BACKUP_DIR
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
        cp /etc/synoinfo.conf $BACKUP_DIR/ 2>/dev/null
        cp /etc.defaults/synoinfo.conf $BACKUP_DIR/ 2>/dev/null
        cp /usr/syno/bin/synocheck $BACKUP_DIR/ 2>/dev/null
        
        echo "Backup created in $BACKUP_DIR"
        """
        
        stdin, stdout, stderr = ssh.exec_command(backup_script)
        output = stdout.read().decode()
        self.log(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {output.strip()}")
    
    def apply_toshiba_fix(self, ssh):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–∫—Å–∞ –¥–ª—è Toshiba HDWT860"""
        fix_script = """
        #!/bin/bash
        
        echo "Applying Toshiba HDWT860 special fix..."
        
        # 1. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Toshiba HDWT860
        echo "Adding Toshiba HDWT860 support..."
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–∏—Å–∫–æ–≤
        cat > /etc/synoinfo.conf.toshiba << 'EOF'
# Toshiba HDWT860 Support
support_disk_compatibility="no"
support_disk_compatibility_check="no"
support_disk_compatibility_override="yes"
support_disk_compatibility_force="yes"

# Specific Toshiba HDWT860 settings
support_toshiba_hdwt860="yes"
support_toshiba_hdwt860_5tb="yes"
support_toshiba_hdwt860_6tb="yes"
support_toshiba_hdwt860_8tb="yes"

# Disk compatibility overrides
support_disk_compatibility_override_toshiba="yes"
support_disk_compatibility_override_hdwt860="yes"
support_disk_compatibility_override_5tb="yes"
support_disk_compatibility_override_6tb="yes"
support_disk_compatibility_override_8tb="yes"

# Force disk recognition
support_disk_force_recognition="yes"
support_disk_force_recognition_toshiba="yes"
support_disk_force_recognition_hdwt860="yes"

# Disable all disk checks
support_disk_compatibility_disable="yes"
support_disk_compatibility_disable_all="yes"
support_disk_compatibility_disable_toshiba="yes"
support_disk_compatibility_disable_hdwt860="yes"
EOF
        
        # 2. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è synoinfo.conf
        echo "Modifying synoinfo.conf..."
        cp /etc/synoinfo.conf /etc/synoinfo.conf.backup
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        sed -i '/support_disk_compatibility/d' /etc/synoinfo.conf
        sed -i '/support_disk_compatibility_check/d' /etc/synoinfo.conf
        sed -i '/support_disk_compatibility_override/d' /etc/synoinfo.conf
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        cat /etc/synoinfo.conf.toshiba >> /etc/synoinfo.conf
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Toshiba HDWT860
        echo "Creating Toshiba HDWT860 script..."
        cat > /usr/local/bin/toshiba_hdwt860_fix.sh << 'EOF'
#!/bin/bash
# Toshiba HDWT860 Special Fix Script

# Force disk recognition
echo "Applying Toshiba HDWT860 fix..."

# Override disk compatibility checks
sed -i 's/support_disk_compatibility="yes"/support_disk_compatibility="no"/g' /etc/synoinfo.conf
sed -i 's/support_disk_compatibility_check="yes"/support_disk_compatibility_check="no"/g' /etc/synoinfo.conf

# Add Toshiba HDWT860 support
echo "support_toshiba_hdwt860=\"yes\"" >> /etc/synoinfo.conf
echo "support_disk_compatibility_override=\"yes\"" >> /etc/synoinfo.conf
echo "support_disk_compatibility_force=\"yes\"" >> /etc/synoinfo.conf

# Force disk recognition
echo "support_disk_force_recognition=\"yes\"" >> /etc/synoinfo.conf
echo "support_disk_force_recognition_toshiba=\"yes\"" >> /etc/synoinfo.conf
echo "support_disk_force_recognition_hdwt860=\"yes\"" >> /etc/synoinfo.conf

echo "Toshiba HDWT860 fix applied"
EOF
        
        chmod +x /usr/local/bin/toshiba_hdwt860_fix.sh
        
        # 4. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è synocheck –¥–ª—è Toshiba HDWT860
        echo "Modifying synocheck for Toshiba HDWT860..."
        cp /usr/syno/bin/synocheck /usr/syno/bin/synocheck.backup
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π synocheck
        cat > /usr/syno/bin/synocheck << 'EOF'
#!/bin/bash
# Synology Drive Unlocker - Toshiba HDWT860 Special Fix

# Check if this is a disk compatibility check
if [[ "$*" == *"disk"* ]] || [[ "$*" == *"compatibility"* ]] || [[ "$*" == *"toshiba"* ]] || [[ "$*" == *"hdwt860"* ]]; then
    echo "Disk compatibility check bypassed for Toshiba HDWT860"
    exit 0
fi

# For other checks, try to run original if it exists
if [ -f /usr/syno/bin/synocheck.original ]; then
    exec /usr/syno/bin/synocheck.original "$@"
else
    exit 0
fi
EOF
        
        chmod +x /usr/syno/bin/synocheck
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–±—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
        echo "Creating systemd service..."
        cat > /etc/systemd/system/toshiba-hdwt860-fix.service << 'EOF'
[Unit]
Description=Toshiba HDWT860 Fix Service
After=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/toshiba_hdwt860_fix.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
        
        systemctl enable toshiba-hdwt860-fix.service 2>/dev/null || echo "systemd not available"
        
        # 6. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∫—Å–∞
        echo "Applying fix..."
        /usr/local/bin/toshiba_hdwt860_fix.sh
        
        echo "Toshiba HDWT860 fix applied successfully"
        """
        
        stdin, stdout, stderr = ssh.exec_command(fix_script)
        output = stdout.read().decode()
        self.log(f"üíæ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–∫—Å: {output}")
    
    def restart_services(self, ssh):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±"""
        restart_script = """
        #!/bin/bash
        echo "Restarting services..."
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–±—ã
        /usr/syno/bin/synopkg restart pkgctl-WebStation 2>/dev/null || echo "WebStation restart failed"
        /usr/syno/bin/synopkg restart pkgctl-Docker 2>/dev/null || echo "Docker restart failed"
        /usr/syno/bin/synopkg restart pkgctl-StorageManager 2>/dev/null || echo "StorageManager restart failed"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å
        /usr/local/bin/toshiba_hdwt860_fix.sh 2>/dev/null || echo "Fix applied"
        
        echo "Services restarted"
        """
        
        stdin, stdout, stderr = ssh.exec_command(restart_script)
        output = stdout.read().decode()
        self.log(f"üîÑ –°–ª—É–∂–±—ã: {output.strip()}")
    
    def restore_system(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        self.log("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        self.progress_bar.start()
        self.progress_var.set("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        def restore():
            try:
                ip = self.ip_var.get()
                login = self.login_var.get()
                password = self.password_var.get()
                
                ssh = paramiko.SSHClient()
                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                ssh.connect(ip, username=login, password=password, timeout=10)
                
                restore_script = """
                #!/bin/bash
                echo "Restoring system..."
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
                if [ -f /etc/synoinfo.conf.backup ]; then
                    cp /etc/synoinfo.conf.backup /etc/synoinfo.conf
                    echo "Restored synoinfo.conf"
                fi
                
                if [ -f /usr/syno/bin/synocheck.backup ]; then
                    cp /usr/syno/bin/synocheck.backup /usr/syno/bin/synocheck
                    chmod +x /usr/syno/bin/synocheck
                    echo "Restored synocheck"
                fi
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                rm -f /usr/local/bin/toshiba_hdwt860_fix.sh
                rm -f /etc/systemd/system/toshiba-hdwt860-fix.service
                rm -f /etc/synoinfo.conf.toshiba
                
                echo "System restored"
                """
                
                stdin, stdout, stderr = ssh.exec_command(restore_script)
                output = stdout.read().decode()
                self.log(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: {output.strip()}")
                
                ssh.close()
                self.log("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                self.progress_var.set("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                self.progress_var.set("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            finally:
                self.progress_bar.stop()
        
        threading.Thread(target=restore, daemon=True).start()

def main():
    root = tk.Tk()
    app = ToshibaHDWT860Fix(root)
    root.mainloop()

if __name__ == "__main__":
    main()
